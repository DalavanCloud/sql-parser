#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 158
#define YY_END_OF_BUFFER 159
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1106] =
    {   0,
        0,    0,  155,  155,    2,    2,  159,  157,    4,    4,
      157,  157,  147,  153,  147,  147,  150,  147,  147,  147,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  147,  155,  156,    2,    2,
        3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    4,  142,    0,
        1,  150,  149,  148,  144,  143,  141,  145,  152,  152,

      152,  152,  152,  152,  124,  152,  125,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  126,  152,  152,  152,  127,  128,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      129,  130,  131,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      132,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      146,  155,  154,    2,    2,    2,    2,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,  151,  148,
      110,  152,  111,  152,  152,  112,  152,  113,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  114,  152,  136,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  115,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  116,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  117,  152,  152,  118,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  119,  152,  152,  120,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  121,  152,
      152,  152,  152,  122,  152,  152,  152,  152,  123,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,  152,  152,  152,  152,  152,  152,
       82,  152,   83,   84,  152,  152,  152,  152,  152,   85,
      152,  152,  152,  152,  152,   86,  152,  152,  152,   87,
       88,  152,  152,  152,  152,  152,  152,  152,   89,  152,
       90,   91,  152,  152,   92,  152,  152,   93,  152,  135,
      152,  152,  152,  152,  152,  152,  152,   94,  152,   95,
       96,   97,  152,   99,  152,  100,  152,  152,  152,  152,
      152,  101,  152,  152,  152,  152,  152,  102,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  103,  152,  152,
      152,  152,  104,  105,  106,  139,  152,  152,  152,  152,

      152,  152,  152,  152,  107,  152,  108,  152,  109,  138,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   61,   62,  152,   63,
      152,  152,  152,  152,  152,  152,   64,  152,  152,  152,
      152,  152,   65,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  140,   66,  152,   67,  152,  152,  152,  152,
       98,  152,   68,   69,  152,  152,  152,  152,   70,   71,
      152,   72,   73,  152,  137,  152,  152,  152,   74,   75,
      152,  152,  152,   76,  152,  152,   77,  152,  152,  152,
      152,  152,   78,  152,  152,  152,   79,  152,  152,  152,
       80,  152,  152,  152,   81,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  152,   35,  152,  152,   36,  152,
       37,  152,  152,  152,  152,   38,   39,  152,   40,   41,
       42,  152,   43,  152,  152,   45,   46,  152,  152,   47,

       48,   49,  152,  152,   50,  152,  134,  152,  152,   51,
      152,  152,  152,   52,  152,   53,  133,   54,   55,  152,
       56,  152,  152,  152,   57,   58,   59,   60,  152,  152,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   17,   18,   19,   20,
       21,  152,  152,   22,   23,  152,   24,   25,   44,  152,

       26,   27,  152,  152,   28,  152,  152,   29,   30,  152,
       31,   32,  152,  152,  152,   33,   34,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   12,  152,
       13,  152,  152,  152,   14,  152,   15,  152,  152,   16,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  152,  152,    9,  152,  152,   10,   11,    2,
        2,    2,    2,    2,    2,    2,    7,  152,  152,    8,
        2,    2,    2,    2,  152,  152,    2,    2,  152,    6,

        2,    2,    5,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        6,    1,    6,    6,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    6,   68,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1113] =
    {   0,
        0,    0,  587,  581,   68,    0,  542, 4377,  135,  137,
      505,    0, 4377, 4377,  133,  500,  135,  134,  470,  463,
        0,  130,  130,  138,  136,  146,  197,  177,  185,  240,
      125,  142,  196,  199,  202,  242,  254,  129,  252,  262,
      305,  284,  198,  260,  147,  393,    0,  404,    0,  202,
      231,  398,  383,    0,    0,  268,  371,  306,  310,  347,
      328,  364,  432,  500,  554,  606,  654,  706,  348,  363,
      754,  360,  286,  428,  430,  806,  854,  389,  427,  449,
      904,  956,  495,  501,  499,  317,  270,  327, 4377,  298,
     4377,  333,  275,  247, 4377, 4377, 4377, 4377,    0,  198,

      190,  359,  380,  231,  255,  436,    0,  300,  316,  501,
      371,  299,  357,  511,  500,  322,  368,  370,  436,  446,
      555,  445,  477,  506,  504,  528,  544,  546,  548,  546,
      594,  545,    0,  553,  567,  561,  606,  564,  600,  587,
      608,  605,  653,  599,  605,  608,  603,  610,  621,  654,
      655,    0,  658,  643,  646,  664,  665,  660,  658,  664,
      667,  705,  670,  669,  708,  708,  701,  706,  711,  707,
      706,  702,  717,  724,  753,  751,  759,  760,  750,  770,
     4377,    0, 4377,    0,  343,    0,  249,    0,  340,  200,
      197,    0,    0,    0,    0,  777,  810,  798,  800,  812,

      831,  821,  864,  856,  898,  866,  910,  928,  923,  958,
     1010,  968,  998,  992, 1007,  900, 1022, 1072, 1016, 1046,
     1058, 1061, 1084, 1055, 1086, 1107, 1098, 1126, 1116, 1032,
     1129, 1137, 1150, 1199, 1160, 1174, 1175, 1189, 1204, 1256,
     1230, 1191, 1233, 1244, 1248, 1278, 1288, 1293, 1262, 1297,
     1287, 1306, 1322, 1327, 1328, 1343, 1360, 1361, 1378, 1372,
     1397, 1406, 1414, 1415, 1428, 1396, 1431, 1445, 1430, 1460,
     1469, 1481, 1486, 1484, 1432, 1490, 1502,    0, 4377,  192,
        0,  767,    0,  769,  769,    0,  782,    0,  850,  843,
      862,  964,  882,  892,  894,  967,  958,    0, 1124,    0,

      967,  981, 1519, 1015, 1064, 1137, 1161, 1155, 1220,    0,
     1232, 1234, 1247, 1259, 1303, 1325, 1325, 1341, 1354,    0,
     1348, 1360, 1376, 1370, 1424, 1472, 1479, 1485, 1499, 1505,
     1511, 1517, 1520, 1535, 1536, 1538, 1543, 1523, 1531,    0,
     1529, 1547, 1547, 1553, 1558, 1553,  132, 1554, 1542, 1544,
     1544,    0, 1557, 1555, 1555, 1572, 1573, 1579, 1567, 1566,
     1576, 1590, 1593, 1575, 1589, 1593, 1584, 1597,    0, 1580,
     1586, 1590, 1599,    0, 1596, 1593, 1600, 1610,    0, 1613,
     1602, 1608, 1627, 1617, 1611, 1631, 1612, 1616, 1629, 1640,
     1631,    0,  147, 1646, 1647, 1648, 1652, 1676, 1660, 1681,

     1662, 1678, 1700, 1706, 1692, 1711, 1714, 1722, 1736, 1746,
     1735, 1748, 1750, 1765, 1778, 1788, 1796, 1780, 1802, 1813,
     1828, 1804, 1814, 1836, 1818, 1852, 1853, 1862, 1858, 1854,
     1864, 1890, 1887, 1904, 1908, 1906, 1902, 1916, 1921, 1920,
     1944, 1954, 1957, 1956, 1972, 1975, 1960, 1962, 1988, 1990,
     1998, 2011, 2006, 2024, 2016, 2028, 2030, 2064, 2052, 2068,
     2065, 2062, 2083, 2080, 2086, 2097, 2101, 2102, 2118, 2119,
     2136, 2142, 2147, 2152, 2155, 2161, 2171, 2170, 2176, 2195,
     2192, 2201, 2206, 2210, 2214, 2220, 2211, 2235, 2244, 2260,
     2216, 2245, 2268, 2289, 2283, 2285, 2270, 2298, 2302, 2313,

     2319, 2335, 2347, 2343, 1646, 1651, 1682, 1696, 1739, 1754,
        0, 1823,    0,    0, 1812, 1857, 1923, 1980, 2016,    0,
     2027, 2026, 2026, 2034, 2097,    0, 2110, 2133, 2143,    0,
        0, 2238, 2273, 2278, 2309, 2341, 2342, 2342,    0, 2337,
        0,    0, 2357, 2343,    0, 2348,  111,    0, 2349,    0,
     2355, 2372, 2360, 2357, 2365, 2372, 2385,    0, 2381,    0,
        0,    0, 2374,    0, 2384,    0, 2381, 2393, 2382, 2398,
     2389,    0, 2406, 2406, 2394, 2395, 2401,    0, 2414, 2415,
     2407, 2409, 2408, 2407, 2418, 2418, 2432,    0, 2432, 2435,
     2441, 2432,    0,    0, 2429,    0, 2447, 2437, 2431, 2454,

     2436, 2450, 2455, 2453,    0, 2442,    0, 2460,    0,    0,
     2471, 2475, 2476, 2480, 2481, 2486, 2489, 2497, 2492, 2505,
     2526, 2529, 2530, 2540, 2538, 2543, 2548, 2564, 2551, 2559,
     2592, 2583, 2596, 2593, 2602, 2605, 2608, 2626, 2627, 2641,
     2651, 2660, 2662, 2650, 2659, 2675, 2672, 2676, 2704, 2694,
     2681, 2716, 2691, 2710, 2729, 2715, 2720, 2726, 2745, 2750,
     2748, 2771, 2780, 2754, 2779, 2783, 2794, 2802, 2804, 2805,
     2808, 2816, 2833, 2834, 2850, 2856, 2862, 2847, 2868, 2858,
     2887, 2898, 2896, 2879, 2912, 2917, 2922, 2921, 2933, 2947,
     2950, 2952, 2978, 2963, 2966, 2987, 2975, 2996, 2981, 2984,

     3012, 3000, 3017, 3021, 3029, 3040, 3035, 3069, 3038, 3070,
     3054, 3075, 3066, 3079, 3083, 3084,    0,    0, 2442,    0,
     2504, 2510, 2515, 2595, 2607, 2618,    0, 2646, 2780, 2805,
     2845, 2857,    0, 2909, 2921, 2965, 2982, 3004, 3009, 3047,
     3074, 3082,    0,    0, 3085,    0, 3092, 3097, 3096, 3112,
        0, 3099,    0,    0, 3100, 3120, 3109, 3117,    0,    0,
     3112,    0,    0, 3127,    0, 3132, 3126, 3117,    0,    0,
     3133, 3121, 3124,    0, 3138, 3136,    0, 3147, 3145, 3130,
     3147, 3152, 3135, 3140, 3142, 3162,    0, 3162, 3164, 3166,
        0, 3154, 3173, 3178,    0, 3177, 3178, 3179, 3182, 3183,

     3187, 3192, 3208, 3211, 3213, 3216, 3241, 3222, 3245, 3246,
     3247, 3250, 3256, 3275, 3262, 3280, 3281, 3290, 3299, 3314,
     3331, 3315, 3316, 3347, 3330, 3353, 3348, 3352, 3344, 3349,
     3370, 3383, 3384, 3387, 3388, 3405, 3406, 3389, 3401, 3424,
     3418, 3422, 3423, 3427, 3459, 3457, 3441, 3458, 3472, 3473,
     3476, 3481, 3475, 3490, 3507, 3498, 3513, 3515, 3524, 3530,
     3547, 3532, 3548, 3549, 3582, 3563, 3565, 3581, 3584, 3586,
     3600, 3603, 3619, 3597, 3188,    0, 3242, 3285, 3292, 3332,
        0, 3379, 3441, 3511, 3532,    0,    0, 3591,    0,    0,
        0, 3598,    0, 3609, 3606,    0,    0, 3609, 3612,    0,

        0,    0, 3621, 3635,    0, 3632,    0, 3630, 3642,    0,
     3625, 3643, 3631,    0, 3654, 3639,    0,    0,    0, 3647,
        0, 3659, 3660, 3642,    0,    0,    0,    0, 3645, 3653,
     3668, 3669, 3677, 3671, 3692, 3694, 3673, 3703, 3707, 3711,
     3709, 3722, 3725, 3748, 3737, 3740, 3743, 3751, 3759, 3765,
     3761, 3762, 3777, 3780, 3791, 3794, 3796, 3799, 3802, 3805,
     3810, 3813, 3828, 3847, 3839, 3831, 3850, 3836, 3853, 3864,
     3887, 3868, 3869, 3879, 3890, 3898, 3893, 3908, 3923, 3921,
     3902, 3924, 3927, 3933, 3939, 3957,    0,    0,    0,    0,
        0, 3672, 3679,    0,    0, 3819,    0,    0,    0, 3841,

        0,    0, 3878, 3928,    0, 3929, 3956,    0,    0, 3943,
        0,    0, 3948, 3954, 3967,    0,    0, 3972, 3973, 3975,
     3976, 3978, 3981, 4010, 3987, 3997, 4011, 4009, 4012, 4015,
     4041, 4027, 4040, 4050, 4063, 4049, 4051, 4065, 4066, 4079,
     4089, 4081, 4094, 4102, 4103, 4105, 4107, 4117,    0, 4001,
        0, 4045, 4103, 4106,    0, 4107,    0, 4104, 4122,    0,
     4135, 4143, 4139, 4157, 4153, 4156, 4161, 4178, 4172, 4187,
     4201, 4189, 4148, 4166,    0, 4189, 4183,    0,    0, 4202,
     4210, 4211, 4213, 4227, 4215, 4226,    0, 4228, 4228,    0,
     4245, 4251, 4261, 4263, 4237, 4244, 4269, 4266, 4247,    0,

     4275, 4277,    0, 4280, 4377, 4346, 4351,  137, 4356, 4361,
     4366, 4371
    } ;

static yyconst flex_int16_t yy_def[1113] =
    {   0,
     1105,    1, 1106, 1106, 1105,    5, 1105, 1105, 1105, 1105,
     1105, 1107, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1105, 1109, 1105, 1110, 1110,
     1105, 1110, 1111, 1110, 1110, 1110, 1110, 1110, 1110, 1110,
     1110, 1112, 1112, 1112,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64, 1110, 1105, 1105, 1107,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1105, 1109, 1105, 1110, 1110, 1110, 1111, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64, 1110, 1105, 1105,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1110, 1110,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,

     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64, 1108, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64, 1108, 1108, 1108, 1108, 1108, 1108, 1108,   64,
       64,   64,   64,   64,   64,   64, 1108, 1108, 1108, 1108,
       64,   64,   64,   64, 1108, 1108,   64,   64, 1108, 1108,

       64,   64, 1108,   64,    0, 1105, 1105, 1105, 1105, 1105,
     1105, 1105
    } ;

static yyconst flex_uint16_t yy_nxt[4446] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   21,   45,   21,
        8,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   21,   45,   21,   46,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   62,   86,   62,   49,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
       84,   85,   62,   86,   62,   87,   88,   88,   88,   88,
       91,   99,   92,   94,   92,   95,   96,  100,  106,  101,
      113,  748,  108,  139,  114,  102,  393,  103,  115,  109,
      140,  104,  105,  158,  116,  180,  110,  117,  107,  111,
      112,  118,  567,  119,  100,  106,  101,  113,  120,  108,
      139,  114,  102,  121,  103,  115,  109,  140,  104,  105,
      158,  116,  180,  110,  117,  107,  111,  112,  118,  130,

      119,  280,  128,  185,   88,  120,  393,  131,  129,  190,
      121,  122,  176,  132,  141,  281,  147,  144,  142,  123,
      177,  145,  124,  282,  143,  125,  130,  146,  126,  128,
      148,  127,   88,   88,  131,  129,  149,  150,  122,  176,
      132,  141,  281,  147,  144,  142,  123,  177,  145,  124,
      282,  143,  125,  392,  146,  126,  280,  148,  127,  133,
      134,  151,  287,  149,  150,  135,  136,  137,  155,  152,
      159,  288,  138,  153,  160,  188,  154,  189,  161,  156,
      162,  178,  179,  163,   93,  157,  133,  134,  151,  287,
      164,  165,  135,  136,  137,  155,  152,  159,  288,  138,

      153,  160,  279,  154,  237,  161,  156,  162,  178,  179,
      163,  173,  157,  174,  191,  189,  175,  164,  165,  166,
      167,  192,  193,  168,  196,  291,  169,  170,   88,   88,
      293,  237,  292,  171,  298,  277,  172,  278,  173,  195,
      174,   94,   92,  175,  185,   88,  166,  167,  191,  189,
      168,  196,  291,  169,  170,  196,  307,  293,  194,  292,
      171,  298,  277,  172,  184,  184,  196,  184,  184,  184,
      184,  184,  184,  225,  184,  184,  184,  227,  196,  226,
      190,  196,  196,  307,  283,  228,  196,  184,  236,  296,
      299,  229,  284,  196,  285,  300,  308,  286,  196,  297,

      225,  196,  309,  252,  227,  196,  226,  196,  196,  186,
      183,  283,  228,  196,  253,  236,  296,  299,  229,  284,
      254,  285,  300,  308,  286,  196,  297,  196,  196,  309,
      252,  184,  184,  184,  196,  184,  184,  184,  184,  184,
      184,  253,  184,  184,  184,  196,  238,  254,  241,  197,
      239,  198,  242,  310,  196,  289,  240,  199,  243,  200,
      181,  255,  311,  201,  202,  196,  196,  256,  196,  290,
      317,  257,  196,  238,   98,  241,  197,  239,  198,  242,
      310,   97,  289,  240,  199,  243,  200,  196,  255,  311,
      201,  202,  196,  196,  256,  196,  290,  317,  257,  184,

      184,  184,  318,  184,  184,  184,  184,  184,  184,   93,
      184,  184,  184,  196,  196,  273,   89,  196,  203,  196,
      275,  276,  270,  274,  271,  301,  294,  272,  295,  318,
      302,  305,  306,  196,  319,  320,  303,  196,  204,  196,
      196, 1105,  273,  304,  196,  203,  196,  275,  276,  270,
      274,  271,  301,  294,  272,  295,  321,  302,  305,  306,
      196,  319,  320,  303,  196,  204,  196,  184,  205,  322,
      304,  312,  196,  313,  323,  206,  324,  314,  325,  330,
      331,  326,  207,  321,  315,  208,  209,   48,  316,  332,
      333,  338,  196,   48, 1105,  205,  322, 1105,  312,  196,

      313,  323,  206,  324,  314,  325,  330,  331,  326,  207,
     1105,  315,  208,  209,  327,  316,  332,  333,  338,  196,
      210,  328,  339,  334,  211,  340,  329,  341,  212,  342,
      348,  343,  349,  335,  213,  350,  351,  214,  336,  337,
     1105,  327, 1105,  352,  196, 1105,  353,  210,  328,  339,
      334,  211,  340,  329,  341,  212,  342,  348,  343,  349,
      335,  213,  350,  351,  214,  336,  337,  344,  354,  345,
      352,  196,  196,  353,  355,  356,  357,  358,  359,  215,
      346,  216,  362,  360,  365,  363,  217,  361,  366,  347,
      364,  218,  196, 1105,  344,  354,  345, 1105,  370,  196,

      371,  355,  356,  357,  358,  359,  215,  346,  216,  362,
      360,  365,  363,  217,  361,  366,  347,  364,  218,  196,
      219,  367,  372,  373,  196,  370,  374,  371,  220,  377,
      368,  221,  375,  378,  222,  379,  380,  223,  369,  381,
      224,  383,  382,  376,  196, 1105, 1105,  219,  367,  372,
      373,  196, 1105,  374, 1105,  220,  377,  368,  221,  375,
      378,  222,  379,  380,  223,  369,  381,  224,  383,  382,
      376,  196,  196,  230,  231,  384,  385,  387,  389,  232,
      233,  234,  386,  390,  391,  505,  235,  506, 1105, 1105,
      388, 1105,  196, 1105,  507,  196,  508, 1105, 1105,  196,

      230,  231,  384,  385,  387,  389,  232,  233,  234,  386,
      390,  391,  505,  235,  506,  196,  196,  388,  196,  196,
      244,  507,  196,  508,  196,  396,  398,  394,  196,  399,
      196,  395, 1105,  397,  245, 1105,  196,  401,  196,  196,
      246,  247,  196,  196,  196,  196, 1105,  244,  196,  196,
      196,  196,  396,  398,  394,  196,  399,  196,  395,  196,
      397,  245,  400,  196,  401,  196,  196,  246,  247,  196,
     1105,  196,  196,  248,  196,  196,  196,  196,  509,  510,
      406,  249,  196,  402,  196,  250,  196,  511,  251,  400,
     1105, 1105,  196, 1105,  196, 1105,  196,  403, 1105,  196,

      248,  196,  196, 1105,  196,  509,  510,  406,  249,  196,
      402,  196,  250,  514,  511,  251,  196,  423,  196,  196,
      258,  196,  259,  404,  403,  260,  515,  516,  196,  196,
      405,  196,  261,  262, 1105,  407,  196,  408,  196, 1105,
      514,  196,  196,  196,  423,  196,  409,  258,  196,  259,
      404, 1105,  260,  515,  516,  196,  410,  405,  411,  261,
      262,  196,  407,  196,  408,  196,  196, 1105,  196,  196,
      263,  264, 1105,  409,  265,  196,  196,  266,  267, 1105,
      512,  517,  513,  410,  268,  411,  196,  269,  196, 1105,
      518,  412,  521,  196,  196,  522,  413,  263,  264,  418,

      419,  265, 1105,  196,  266,  267,  196,  512,  517,  513,
      196,  268, 1105,  196,  269, 1105,  196,  518,  412,  521,
      421,  196,  522,  413,  414,  196,  418,  419,  196,  415,
      196,  526,  420,  196,  196,  416,  196,  196,  424,  422,
      196,  430,  417,  196, 1105,  196, 1105,  421,  196, 1105,
      196,  414,  196, 1105,  196,  196,  415,  196,  526,  420,
      196,  196,  416,  196,  196,  424,  422,  196,  430,  417,
      196,  431,  196,  196, 1105,  196,  196,  196, 1105,  196,
      435,  196,  527, 1105,  196, 1105,  432,  196,  425, 1105,
      426,  196,  433,  196,  427, 1105,  196,  196,  431,  196,

      196,  428,  196,  196,  196,  429,  196,  435, 1105,  527,
      196,  196,  434,  432,  436,  425,  196,  426, 1105,  433,
      196,  427,  196,  196,  196,  196,  196, 1105,  428,  196,
      438,  196,  429,  439,  196,  437,  196,  196,  519,  434,
     1105,  436,  520,  196,  196,  196,  440,  196, 1105,  196,
      443,  196,  196,  441,  196,  196,  444,  438,  442,  445,
      439,  196,  437,  196,  196,  519, 1105,  196,  196,  520,
      528,  196,  196,  440,  196,  196,  529,  443,  196,  446,
      441,  196,  196,  444,  530,  442,  445,  451,  196, 1105,
     1105,  196,  196,  196,  196,  196,  452,  528,  196, 1105,

     1105, 1105,  196,  529, 1105,  196,  446,  196,  454,  196,
     1105,  530,  196,  453,  451,  196,  447,  196,  462,  196,
      196, 1105,  196,  452, 1105,  196,  448,  196,  455,  196,
      456,  449,  450, 1105,  196,  454,  196,  196,  531,  196,
      453, 1105,  196,  447,  196,  462,  532, 1105,  196,  196,
     1105,  196,  533,  448,  196,  455,  196,  456,  449,  450,
      463,  461,  196,  534,  196,  531,  196, 1105,  196,  196,
      457,  196,  458,  532,  196,  196, 1105,  464,  196,  533,
      196,  465,  196,  459, 1105, 1105,  196,  463,  461,  196,
      534,  535,  460,  196,  196,  196,  196,  457,  196,  458,

      196,  196,  467,  466,  464,  196,  196,  196,  465,  196,
      459,  196,  468,  196,  469,  196,  196, 1105,  535,  460,
      470,  196, 1105,  196,  196,  196,  196,  196,  536,  467,
      466,  196,  196,  196, 1105,  196,  472,  471,  196,  468,
      196,  469,  196,  196,  196,  473,  196,  470, 1105,  474,
      475,  196,  196,  196, 1105,  536,  537,  538,  196,  539,
      196,  196,  196,  472,  471,  196,  196,  196,  540, 1105,
      476,  196,  473,  196,  541,  477,  474,  475,  196,  196,
      478,  196,  479,  537,  538,  542,  539,  196,  196, 1105,
      196,  543,  196,  196,  480,  540,  196,  476,  196,  196,

      483,  541,  477,  481,  544,  196,  196,  478,  196,  479,
      196,  482,  542, 1105,  490,  196,  196,  196,  543, 1105,
      485,  480, 1105,  196,  196,  196,  196,  483,  484,  486,
      481,  544,  196,  196,  196,  196, 1105,  196,  482, 1105,
      487,  490,  196,  196,  196,  545,  196,  485,  196,  196,
      502,  196,  196,  196,  488,  484,  486,  491, 1105,  196,
      196,  196,  196,  196,  493,  489,  196,  487,  196,  196,
      196,  196,  545,  196,  492,  196,  196,  502,  196,  196,
      196,  488,  494,  196,  491,  495,  496,  196, 1105, 1105,
      196,  493,  489,  196,  546,  196,  196,  196,  196,  196,

      547,  492,  500,  497,  196,  196, 1105,  196,  196,  494,
      196,  498,  495,  496,  196,  501,  504,  499,  548,  196,
      196,  546,  196,  503,  196,  196,  196,  547,  196,  500,
      497,  196,  549,  523,  196,  196,  550,  524,  498,  551,
      196,  552,  501,  504,  499,  548,  196,  196,  553,  196,
      503,  196,  525,  554,  555,  196,  556,  559,  560,  549,
      523,  557,  561,  550,  524,  562,  551,  196,  552,  563,
      564,  558,  565,  566,  568,  553,  569,  570,  571,  525,
      554,  555,  572,  556,  559,  560,  573,  574,  557,  561,
      575,  576,  562,  577,  578,  579,  563,  564,  558,  565,

      566,  568,  580,  569,  570,  571,  581,  582,  583,  572,
      584,  585,  586,  573,  574,  587,  588,  575,  576,  589,
      577,  578,  579,  590,  591,  592,  593,  594,  595,  580,
      598,  596,  599,  581,  582,  583,  600,  584,  585,  586,
      597,  601,  587,  588,  602,  603,  589,  604,  605,  606,
      590,  591,  592,  593,  594,  595,  607,  598,  596,  599,
      608,  609,  610,  600,  196,  611,  196,  597,  601, 1105,
      612,  602,  603, 1105,  604,  605,  606,  717,  196, 1105,
      196, 1105,  718,  607,  196,  196,  196,  608,  609,  610,
      196,  196,  611,  196,  196,  614,  196,  612,  196,  196,

      196,  613, 1105, 1105,  717,  196,  615,  196,  618,  718,
      619,  196,  196,  196,  196, 1105,  196,  196,  196,  196,
      719,  196,  614,  196,  196,  196,  196,  196,  613,  196,
      196,  617,  196,  615,  720,  618,  616,  619,  196, 1105,
      196,  196,  620,  196,  196,  196,  196,  719,  621,  196,
      623,  196,  196,  196,  196,  622,  196,  196,  617,  196,
      196,  720,  625,  616,  196,  196,  626,  196,  196,  620,
      721,  196,  722,  196,  196,  621,  196,  623,  624,  196,
      196,  196,  622,  196,  196, 1105,  196,  196,  196,  625,
      627,  196,  628,  626, 1105,  196,  196,  721,  633,  722,

      196,  196,  629,  196, 1105,  624,  630, 1105, 1105, 1105,
      196,  196,  632,  196,  196,  196,  196,  627,  196,  628,
      196,  631,  637,  196, 1105,  633,  196, 1105,  635,  629,
      196,  196,  196,  630,  196,  634,  639,  723,  724,  632,
      196,  196,  196,  196, 1105,  196,  196,  196,  631,  637,
      638,  196,  196,  196,  196,  635,  196,  636,  196,  196,
     1105,  196,  634,  639,  723,  724,  196,  196,  640,  196,
      196,  196,  196,  196,  196, 1105,  196,  638,  196,  196,
      196,  196,  645,  196,  636,  641,  644,  642,  725,  643,
      196,  196,  196,  196, 1105,  640,  196,  196,  196,  196,

      196,  196,  196,  196,  646,  196, 1105,  196,  196,  645,
     1105, 1105,  641,  644,  642,  725,  643,  196,  196,  196,
      196,  649,  196,  196,  196,  196,  196,  196,  196,  196,
      647,  646,  196,  648,  196,  196,  650,  651,  196,  196,
      196,  653,  196,  652,  196, 1105,  196,  196,  649,  196,
     1105,  196,  196,  196,  196,  196,  726,  647,  196,  196,
      648,  196,  196,  650,  651,  196,  196,  196,  653,  196,
      652,  196,  196,  196,  196,  196, 1105,  654,  660, 1105,
      661,  196,  196,  726,  657,  196,  196,  655,  656,  196,
      196, 1105,  196,  196,  196,  196,  658, 1105,  196,  196,

      196,  196,  196,  659,  654,  660,  662,  661,  663,  196,
      196,  657,  727,  196,  655,  656,  196,  196,  664,  196,
      196,  196,  196,  658,  196,  196,  196,  196,  196,  196,
      659,  728,  665,  662,  668,  663,  196,  196,  666,  727,
      196, 1105,  196,  196,  196,  664,  196,  670,  196,  196,
      669,  196,  729,  196,  196,  196,  196,  667,  728,  665,
      730,  668,  196,  196,  731,  666,  196,  732,  196,  196,
      196,  196,  672,  196,  670,  196,  196,  669,  671,  729,
      196,  196,  196,  196,  667,  674,  196,  730, 1105,  196,
      196,  731, 1105,  196,  732,  196,  675,  196,  196,  672,

      196,  196,  196,  196,  196,  671,  196,  196,  673,  196,
      196,  733,  674,  196,  677,  196,  676,  196,  196,  196,
      196,  196,  678,  675,  196,  196,  734,  196,  196,  196,
      196,  196,  679,  196,  680,  196,  681,  682,  733,  196,
      196,  677,  196,  676, 1105,  196,  196,  196,  196,  678,
      683,  196, 1105,  734,  196,  735,  196,  196, 1105,  679,
      196,  680,  196,  681,  682,  196,  196,  196,  736,  684,
      196,  687, 1105,  196,  196,  688,  685,  683,  686,  196,
      196,  196,  735,  196,  196,  196, 1105,  196,  196,  196,
      196,  690,  196,  196,  691,  736,  684,  196,  687,  196,

      196,  196,  688,  685,  689,  686,  196,  196,  196,  196,
      693, 1105,  196,  196,  196,  196,  196,  196,  690,  196,
      196,  691, 1105,  692,  196, 1105,  196, 1105,  196,  196,
      196,  689,  196,  196,  701,  196,  196,  693,  196,  196,
      196,  196,  694,  695,  196,  697,  196,  696,  196,  196,
      692,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  701,  196,  196,  698,  196,  196,  737, 1105,  694,
      695,  196,  697,  196,  696,  196,  196,  699,  196,  196,
      196,  196,  196,  196, 1105,  196,  702,  700,  196,  196,
      196,  698, 1105, 1105,  737,  703, 1105,  708,  196,  707,

      196,  196,  738,  196,  699,  196,  196,  196,  196,  196,
      196,  706,  739,  702,  700,  196,  196,  704,  710,  705,
      196,  196,  703,  196,  708,  196,  707,  196,  196,  738,
      196,  196,  709,  196,  196,  196,  196,  196,  706,  739,
      196, 1105,  740,  196,  704,  710,  705,  196,  196,  711,
      196,  196,  712,  196,  196,  741,  742,  196,  196,  709,
      743,  196,  713,  196,  196,  196,  714,  196,  715,  740,
      744,  745,  746,  196,  716,  747,  711,  749,  196,  712,
      196,  196,  741,  742,  196,  196,  750,  743,  196,  713,
      751,  752,  196,  714,  753,  715,  754,  744,  745,  746,

      196,  716,  747,  755,  749,  756,  758,  759,  196,  760,
      761,  762,  196,  750,  763,  764,  757,  751,  752,  765,
      766,  753,  767,  754,  768,  769,  770,  771,  772,  773,
      755,  774,  756,  758,  759,  775,  760,  761,  762,  776,
      777,  763,  764,  757,  778,  779,  765,  766,  780,  767,
      781,  768,  769,  770,  771,  772,  773,  782,  774,  783,
      784,  785,  775,  786,  787,  788,  776,  777,  789,  790,
      791,  778,  779,  792,  793,  780,  794,  781,  795, 1105,
     1105,  875, 1105, 1105,  782, 1105,  783,  784,  785,  196,
      786,  787,  788,  196,  196,  789,  790,  791,  196,  196,

      792,  793,  796,  794,  801,  795,  797,  196,  875,  196,
      196,  802,  800,  196,  798,  196,  196, 1105,  799,  196,
      196,  196,  876,  196,  196,  196,  196,  196,  877,  796,
      196,  801,  878,  797,  196,  196,  196,  196,  802,  800,
      196,  798,  196,  196,  196,  799,  196,  196,  196,  876,
      196,  196,  803,  807,  196,  877,  196,  196,  196,  878,
      804,  196,  196,  805,  196, 1105,  196,  196,  196,  196,
      196,  196,  806,  808,  196,  196,  196,  196,  196,  803,
      807,  196,  196,  196, 1105,  196,  196,  804,  196,  810,
      805,  196,  811,  196,  196,  196,  196,  196,  809,  806,

      808,  196,  196,  196,  196,  196,  812, 1105,  196,  196,
      196,  196,  813,  196,  196,  814,  810, 1105, 1105,  811,
      196,  196,  879,  196,  196,  809,  196,  815,  196,  196,
      196,  196, 1105,  812,  196,  880,  881,  196,  196,  813,
      196,  196,  814,  196,  196,  196,  196,  196,  196,  879,
      196, 1105, 1105,  196,  815,  816,  817,  196,  196,  196,
      882,  196,  880,  881,  196,  196, 1105,  196,  822,  196,
      196,  196,  196,  196,  820,  818,  821,  196,  196,  196,
      196, 1105,  816,  817,  819, 1105,  196,  882,  196,  196,
      196,  196,  196,  196,  196,  822,  196,  196,  196,  196,

      196,  820,  818,  821,  196,  196,  196,  196,  823,  196,
      196,  819,  196,  196,  196,  196,  196,  196,  824,  196,
      196,  196,  196,  825,  196,  196,  196,  196,  196,  196,
     1105,  827,  196,  196,  196,  823,  196,  196,  196,  196,
      196,  196,  196,  826,  830,  824,  196,  196,  196,  196,
      825,  829, 1105,  196,  196,  196,  196,  828,  196,  196,
      196,  196, 1105,  196,  196,  196,  196,  196,  196,  196,
      826,  830,  196, 1105,  196,  196,  831, 1105,  829,  833,
      196,  196, 1105,  196,  828,  196,  196,  832,  196,  196,
      196,  196,  196,  196,  196,  196, 1105,  196,  196,  196,

      835,  196,  834,  831,  837, 1105,  833, 1105,  883,  196,
      196,  836,  196,  196,  832,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  835,  196,  834,
      884,  837,  196,  839,  196,  883,  196,  838,  836,  196,
      196, 1105,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  841,  196,  196, 1105, 1105,  884, 1105,  196,
      839,  196,  840,  885,  838,  196, 1105,  196,  196,  196,
      196,  196,  196,  196,  196,  886,  847,  844,  196,  841,
      196,  196,  842,  843,  846,  196,  196, 1105,  196,  840,
      885, 1105,  196,  845,  196,  196,  196,  196,  196,  196,

      196,  196,  886,  847,  844,  196,  196,  196, 1105,  842,
      843,  846,  196,  196,  196,  196,  196,  196,  848, 1105,
      845,  196,  850,  196,  196,  196,  851,  196, 1105,  849,
      196,  852,  196,  196,  196,  196,  196, 1105, 1105,  196,
      196,  196,  887,  196,  196,  848,  853,  854,  888,  850,
      196,  196,  196,  851, 1105,  196,  849,  196,  852,  196,
      196,  196,  196,  196,  855,  196,  196,  196,  196,  887,
      196,  196, 1105,  853,  854,  888,  857,  196,  196,  858,
      856,  196,  196,  889,  860,  196,  196,  196,  196, 1105,
      196,  855,  196,  862,  859,  196,  196,  196,  196,  196,

      890,  196,  196,  857,  196,  196,  858,  856,  196,  861,
      889,  860,  196,  196,  196,  196,  196,  196,  196,  196,
      862,  859,  196,  196,  863,  196,  196,  890,  196,  196,
      196,  196,  196,  865,  196,  196,  861,  891,  196,  196,
      196,  196,  892,  196,  864,  196,  196,  196,  866,  196,
      196,  863,  196,  196,  868,  196,  871,  196,  196,  196,
      865,  196,  196,  867,  891,  196,  196,  196,  869,  892,
     1105,  864,  196,  196,  196,  866,  196,  196,  196,  893,
      196,  868,  196,  871,  196,  196,  196,  196,  196,  870,
      867,  872,  196,  196,  196,  869,  894,  874,  895,  196,

      196,  196,  196,  196,  196,  196,  893,  196,  196,  873,
      896,  196,  897,  196,  196,  196,  870,  196,  872,  196,
      196,  196,  196,  894,  874,  895,  898,  899,  196,  196,
      900,  196,  901,  902,  196,  196,  873,  896,  903,  897,
      196,  904,  905,  906,  196,  907,  908,  909,  196,  196,
      910,  911,  912,  898,  899,  913,  914,  900,  915,  901,
      902,  916,  917,  918,  919,  903,  920,  921,  904,  905,
      906,  922,  907,  908,  909,  923,  924,  910,  911,  912,
      925,  926,  913,  914,  927,  915,  928,  929,  916,  917,
      918,  919,  930,  920,  921,  196,  196,  196,  922, 1105,

      196,  932,  923,  924, 1105,  933,  987,  925,  926,  934,
      196,  927, 1105,  928,  929,  196,  196,  196,  931,  930,
      196,  196,  196,  196,  196,  196,  196,  196,  932,  196,
      196,  937,  933,  987,  196,  935,  934,  196, 1105,  936,
      196, 1105,  196,  196,  196,  931,  196,  196,  196,  196,
      939,  196,  196,  196,  196,  938,  196,  196,  937,  196,
      196,  196,  935,  196,  941,  942,  936,  196,  196,  988,
      940, 1105, 1105,  196,  196, 1105,  196,  939,  196,  196,
      945,  196,  938,  196,  196,  196,  196,  196,  196,  943,
      196,  941,  942,  196,  196,  196,  988,  940,  946,  196,

      196,  196,  944,  989, 1105, 1105,  196,  945,  196, 1105,
      196,  196,  196,  196,  947,  196,  943,  196,  196,  196,
      196,  196, 1105,  948,  990,  946,  196,  196,  196,  944,
      989,  949,  196,  196,  196,  196,  950,  196, 1105, 1105,
      196,  947, 1105, 1105,  196,  196,  196,  951,  196,  196,
      948,  990,  196,  196,  196,  196, 1105,  991,  949,  196,
      196,  196,  956,  950,  196,  196,  196,  196,  196,  196,
      196,  196,  952,  953,  951,  196,  196,  954, 1105,  196,
      196,  196,  196,  955,  991,  196,  196,  196,  196,  956,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  952,

      953,  196,  196,  957,  954,  196,  959,  196,  196,  196,
      955,  992,  196,  196,  196,  196, 1105,  196,  196,  196,
      958,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      957,  961,  196,  959,  196,  196,  196,  960,  992,  196,
      196,  963,  196,  196,  196,  196,  196,  958,  196,  196,
      196,  196,  196,  196,  196,  962,  196,  993,  961,  196,
      196,  196,  196,  196,  960,  196,  196,  196,  963,  196,
      196,  196,  196,  964,  966,  196,  196,  196,  965,  196,
     1105, 1105,  962,  196,  993, 1105,  196,  196,  196,  196,
      196,  967,  196,  196,  196,  196,  196,  196, 1105,  196,

      964,  966,  196,  196,  196,  965,  196,  968,  970, 1105,
      196,  196,  969,  196,  196, 1105,  196,  196,  967,  196,
      196,  196,  196,  196,  196,  196,  196,  972,  196,  971,
     1105,  196,  973,  196,  968,  970,  196,  196,  196,  969,
      196,  196,  196,  196,  994,  196,  196,  975,  196,  995,
      196,  196,  196,  196,  972,  196,  971,  974,  196,  973,
      196,  976,  196,  196,  977,  196,  196,  196,  196,  196,
      196,  994,  196, 1105,  975,  196,  995,  196,  196,  978,
      196,  196,  979,  981,  974,  196,  196,  196,  976,  196,
     1105,  977,  196,  196,  196,  196,  980,  196,  982,  196,

      196,  196,  983,  196,  196, 1105,  978,  996,  196,  979,
      981, 1105,  196,  196,  196,  196,  997,  985,  196,  196,
      196,  196,  196,  980,  196,  982,  196,  196,  196,  983,
      196,  196,  984,  986,  996,  196,  998,  196,  196,  999,
     1000,  196,  196,  997,  985,  196,  196,  196,  196,  196,
     1001,  196, 1002, 1003, 1004, 1005, 1006,  196, 1007,  984,
      986, 1008,  196,  998,  196,  196,  999, 1000,  196, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1001, 1017, 1002,
     1003, 1004, 1005, 1006,  196, 1007, 1018,  196, 1008, 1020,
     1049,  196, 1105, 1050, 1105,  196, 1009, 1010, 1011, 1012,

     1013, 1014, 1015, 1016, 1019, 1017,  196,  196, 1105,  196,
      196,  196,  196, 1018,  196,  196, 1020, 1049,  196, 1022,
     1050,  196,  196, 1024, 1021,  196, 1026,  196, 1105,  196,
      196, 1019,  196,  196,  196, 1023,  196,  196,  196,  196,
      196,  196,  196,  196, 1025,  196, 1022,  196,  196,  196,
     1024, 1021,  196, 1026,  196,  196,  196,  196,  196,  196,
      196,  196, 1023,  196, 1027, 1105,  196,  196,  196, 1028,
      196, 1025,  196, 1105,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1105,  196,  196,  196,  196,  196,
      196, 1027, 1029,  196, 1030,  196, 1028,  196,  196,  196,

      196, 1105,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1031,  196,  196,  196,  196,  196,  196,  196, 1029,
      196, 1030,  196, 1034,  196,  196,  196,  196,  196, 1032,
      196,  196,  196, 1033,  196, 1035,  196,  196, 1031,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
     1034,  196, 1051, 1037, 1039,  196, 1032,  196,  196,  196,
     1033,  196, 1035, 1052,  196,  196,  196,  196,  196,  196,
      196,  196, 1036,  196,  196,  196,  196,  196,  196, 1051,
     1037, 1039,  196, 1038,  196,  196,  196,  196,  196, 1105,
     1052, 1040,  196,  196, 1053,  196,  196,  196,  196, 1036,

     1042,  196,  196, 1041,  196,  196,  196,  196,  196,  196,
     1038,  196,  196,  196,  196,  196,  196,  196, 1040, 1105,
      196, 1053, 1044, 1043,  196,  196,  196, 1042,  196,  196,
     1041,  196,  196,  196,  196,  196,  196, 1045,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196, 1105, 1044,
     1043,  196,  196,  196, 1046,  196, 1054,  196,  196,  196,
     1055,  196,  196,  196, 1045,  196,  196,  196,  196,  196,
     1047,  196,  196,  196, 1056,  196, 1057,  196,  196, 1058,
     1059, 1046, 1048, 1054,  196, 1060,  196, 1055,  196,  196,
      196,  196,  196,  196,  196,  196,  196, 1047,  196, 1061,

     1105, 1056,  196, 1057,  196,  196, 1058, 1059, 1105, 1048,
      196,  196, 1060,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196, 1062,  196, 1061,  196,  196,  196,
      196, 1105,  196,  196, 1073,  196, 1105,  196,  196, 1105,
      196,  196,  196,  196, 1063,  196,  196,  196,  196,  196,
      196, 1062,  196,  196,  196,  196,  196,  196,  196,  196,
      196, 1073,  196, 1064, 1105,  196, 1065,  196,  196,  196,
     1105, 1063,  196, 1074,  196,  196,  196,  196,  196,  196,
      196,  196, 1067, 1068,  196,  196,  196,  196,  196,  196,
     1064, 1066,  196, 1065,  196,  196,  196,  196, 1105,  196,

     1074,  196, 1105,  196,  196,  196,  196,  196,  196, 1067,
     1068,  196,  196, 1105,  196,  196,  196,  196, 1066,  196,
      196,  196, 1069, 1072,  196,  196,  196,  196,  196, 1071,
      196,  196,  196, 1070,  196,  196, 1075, 1076, 1077,  196,
      196,  196, 1078,  196,  196,  196,  196,  196,  196, 1069,
     1072, 1079,  196,  196,  196,  196, 1071,  196, 1105,  196,
     1070,  196,  196, 1075, 1076, 1077, 1087,  196,  196, 1078,
      196,  196,  196,  196,  196,  196, 1080,  196, 1079,  196,
      196,  196,  196, 1105,  196, 1081, 1082, 1083,  196, 1105,
      196,  196, 1105, 1087,  196,  196,  196, 1088,  196,  196,

      196,  196,  196, 1080,  196,  196,  196,  196,  196, 1084,
      196, 1089, 1081, 1082, 1083, 1090,  196,  196,  196,  196,
     1091,  196,  196,  196, 1088, 1085,  196,  196,  196,  196,
     1086,  196,  196,  196,  196, 1093, 1084,  196, 1089,  196,
      196, 1092, 1090,  196,  196,  196,  196, 1091,  196,  196,
     1095,  196, 1085,  196,  196,  196,  196, 1086,  196, 1094,
      196, 1096, 1093,  196,  196,  196,  196,  196, 1092,  196,
     1099,  196,  196, 1097, 1105,  196,  196, 1095,  196,  196,
      196,  196, 1100,  196,  196, 1103, 1094,  196, 1096,  196,
      196,  196,  196,  196, 1098,  196,  196, 1099,  196,  196,

     1097,  196, 1101, 1105, 1102, 1105,  196,  196,  196, 1100,
      196,  196, 1103, 1104,  196,  196,  196, 1105,  196, 1105,
      196, 1098,  196, 1105, 1105,  196,  196, 1105,  196, 1101,
     1105, 1102, 1105, 1105,  196, 1105, 1105, 1105, 1105, 1105,
     1104, 1105,  196, 1105, 1105,  196,   47,   47,   47,   47,
       47,   90, 1105, 1105,   90,   90,  182,  182,  182, 1105,
      182,  184, 1105,  184,  184,  184,  187, 1105,  187,  187,
      187,  196, 1105,  196,  196,  196,    7, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105
    } ;

static yyconst flex_int16_t yy_chk[4446] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    9,    9,   10,   10,
       15, 1108,   15,   17,   17,   18,   18,   22,   23,   22,
       25,  547,   24,   31,   25,   22,  393,   22,   25,   24,
       32,   22,   22,   38,   25,   45,   24,   25,   23,   24,
       24,   26,  347,   26,   22,   23,   22,   25,   26,   24,
       31,   25,   22,   26,   22,   25,   24,   32,   22,   22,
       38,   25,   45,   24,   25,   23,   24,   24,   26,   29,

       26,  280,   28,   50,   50,   26,  191,   29,   28,  190,
       26,   27,   43,   29,   33,  100,   35,   34,   33,   27,
       43,   34,   27,  101,   33,   27,   29,   34,   27,   28,
       35,   27,   51,   51,   29,   28,   35,   35,   27,   43,
       29,   33,  100,   35,   34,   33,   27,   43,   34,   27,
      101,   33,   27,  187,   34,   27,   94,   35,   27,   30,
       30,   36,  104,   35,   35,   30,   30,   30,   37,   36,
       39,  105,   30,   36,   39,   56,   36,   56,   40,   37,
       40,   44,   44,   40,   93,   37,   30,   30,   36,  104,
       40,   40,   30,   30,   30,   37,   36,   39,  105,   30,

       36,   39,   90,   36,   73,   40,   37,   40,   44,   44,
       40,   42,   37,   42,   58,   58,   42,   40,   40,   41,
       41,   59,   59,   41,   73,  108,   41,   41,   88,   88,
      109,   73,  108,   41,  112,   86,   41,   87,   42,   61,
       42,   92,   92,   42,  185,  185,   41,   41,  189,  189,
       41,   73,  108,   41,   41,   86,  116,  109,   60,  108,
       41,  112,   86,   41,   62,   62,   69,   62,   62,   62,
       62,   62,   62,   69,   62,   62,   62,   70,   72,   69,
       57,   70,   86,  116,  102,   70,   69,   53,   72,  111,
      113,   70,  102,   69,  103,  113,  117,  103,   72,  111,

       69,   70,  118,   78,   70,   72,   69,   78,   70,   52,
       48,  102,   70,   69,   78,   72,  111,  113,   70,  102,
       78,  103,  113,  117,  103,   72,  111,   78,   70,  118,
       78,   62,   63,   63,   78,   63,   63,   63,   63,   63,
       63,   78,   63,   63,   63,   79,   74,   78,   75,   63,
       74,   63,   75,  119,   78,  106,   74,   63,   75,   63,
       46,   79,  120,   63,   63,   79,   74,   80,   75,  106,
      122,   80,   79,   74,   20,   75,   63,   74,   63,   75,
      119,   19,  106,   74,   63,   75,   63,   80,   79,  120,
       63,   63,   79,   74,   80,   75,  106,  122,   80,   63,

       64,   64,  123,   64,   64,   64,   64,   64,   64,   16,
       64,   64,   64,   83,   80,   84,   11,   85,   64,   84,
       85,   85,   83,   84,   83,  114,  110,   83,  110,  123,
      114,  115,  115,   83,  124,  125,  114,   85,   64,   84,
       83,    7,   84,  114,   85,   64,   84,   85,   85,   83,
       84,   83,  114,  110,   83,  110,  126,  114,  115,  115,
       83,  124,  125,  114,   85,   64,   84,   64,   65,  127,
      114,  121,   65,  121,  128,   65,  129,  121,  130,  132,
      134,  130,   65,  126,  121,   65,   65,    4,  121,  135,
      136,  138,   65,    3,    0,   65,  127,    0,  121,   65,

      121,  128,   65,  129,  121,  130,  132,  134,  130,   65,
        0,  121,   65,   65,  131,  121,  135,  136,  138,   65,
       66,  131,  139,  137,   66,  140,  131,  141,   66,  142,
      144,  142,  145,  137,   66,  146,  147,   66,  137,  137,
        0,  131,    0,  148,   66,    0,  149,   66,  131,  139,
      137,   66,  140,  131,  141,   66,  142,  144,  142,  145,
      137,   66,  146,  147,   66,  137,  137,  143,  150,  143,
      148,   66,   67,  149,  151,  153,  154,  155,  156,   67,
      143,   67,  158,  157,  160,  159,   67,  157,  161,  143,
      159,   67,   67,    0,  143,  150,  143,    0,  163,   67,

      164,  151,  153,  154,  155,  156,   67,  143,   67,  158,
      157,  160,  159,   67,  157,  161,  143,  159,   67,   67,
       68,  162,  165,  166,   68,  163,  167,  164,   68,  169,
      162,   68,  168,  170,   68,  171,  172,   68,  162,  173,
       68,  174,  173,  168,   68,    0,    0,   68,  162,  165,
      166,   68,    0,  167,    0,   68,  169,  162,   68,  168,
      170,   68,  171,  172,   68,  162,  173,   68,  174,  173,
      168,   68,   71,   71,   71,  175,  176,  177,  178,   71,
       71,   71,  176,  179,  180,  282,   71,  284,    0,    0,
      177,    0,   71,    0,  285,  196,  287,    0,    0,   71,

       71,   71,  175,  176,  177,  178,   71,   71,   71,  176,
      179,  180,  282,   71,  284,  196,  198,  177,  199,   71,
       76,  285,  196,  287,   76,  199,  200,  197,  197,  200,
      200,  198,    0,  199,   76,    0,  198,  202,  199,  202,
       76,   76,  196,  198,   76,  199,    0,   76,  197,  201,
      200,   76,  199,  200,  197,  197,  200,  200,  198,  202,
      199,   76,  201,  198,  202,  199,  202,   76,   76,  201,
        0,   76,   77,   77,  204,  197,  201,  200,  289,  290,
      206,   77,  203,  203,  206,   77,  202,  291,   77,  201,
        0,    0,   77,    0,  204,    0,  201,  203,    0,   77,

       77,  204,  203,    0,  206,  289,  290,  206,   77,  203,
      203,  206,   77,  293,  291,   77,  205,  216,  216,   77,
       81,  204,   81,  205,  203,   81,  294,  295,  207,  203,
      205,  206,   81,   81,    0,  207,  205,  207,  216,    0,
      293,  209,   81,  205,  216,  216,  208,   81,  207,   81,
      205,    0,   81,  294,  295,  207,  208,  205,  209,   81,
       81,  209,  207,  205,  207,  216,  208,    0,  209,   81,
       82,   82,    0,  208,   82,  207,  210,   82,   82,    0,
      292,  296,  292,  208,   82,  209,  212,   82,  209,    0,
      297,  210,  301,  208,   82,  302,  210,   82,   82,  212,

      212,   82,    0,  210,   82,   82,  212,  292,  296,  292,
      214,   82,    0,  212,   82,    0,  213,  297,  210,  301,
      214,   82,  302,  210,  211,  215,  212,  212,  211,  211,
      214,  304,  213,  212,  219,  211,  213,  214,  217,  215,
      217,  219,  211,  213,    0,  215,    0,  214,  211,    0,
      230,  211,  215,    0,  219,  211,  211,  214,  304,  213,
      217,  219,  211,  213,  220,  217,  215,  217,  219,  211,
      230,  220,  215,  224,    0,  211,  221,  230,    0,  222,
      224,  219,  305,    0,  220,    0,  221,  217,  218,    0,
      218,  220,  222,  224,  218,    0,  221,  230,  220,  222,

      224,  218,  223,  221,  225,  218,  222,  224,    0,  305,
      218,  220,  223,  221,  225,  218,  227,  218,    0,  222,
      224,  218,  223,  221,  225,  226,  222,    0,  218,  223,
      227,  225,  218,  227,  229,  226,  227,  218,  299,  223,
        0,  225,  299,  227,  228,  226,  228,  231,    0,  223,
      229,  225,  226,  228,  229,  232,  231,  227,  228,  232,
      227,  229,  226,  227,  228,  299,    0,  231,  233,  299,
      306,  228,  226,  228,  231,  232,  307,  229,  235,  233,
      228,  229,  232,  231,  308,  228,  232,  235,  233,    0,
        0,  228,  236,  237,  231,  233,  236,  306,  235,    0,

        0,    0,  232,  307,    0,  235,  233,  238,  238,  242,
        0,  308,  236,  237,  235,  233,  234,  234,  242,  236,
      237,    0,  239,  236,    0,  235,  234,  238,  239,  242,
      239,  234,  234,    0,  238,  238,  242,  234,  309,  236,
      237,    0,  239,  234,  234,  242,  311,    0,  241,  239,
        0,  243,  312,  234,  238,  239,  242,  239,  234,  234,
      243,  241,  244,  313,  234,  309,  245,    0,  241,  239,
      240,  243,  240,  311,  240,  241,    0,  244,  243,  312,
      249,  245,  244,  240,    0,    0,  245,  243,  241,  244,
      313,  314,  240,  245,  240,  241,  246,  240,  243,  240,

      249,  240,  247,  246,  244,  251,  247,  249,  245,  244,
      240,  248,  248,  245,  250,  250,  246,    0,  314,  240,
      251,  240,    0,  246,  252,  251,  247,  249,  315,  247,
      246,  248,  251,  247,    0,  250,  253,  252,  248,  248,
      253,  250,  250,  246,  252,  254,  255,  251,    0,  254,
      255,  252,  251,  247,    0,  315,  316,  317,  248,  318,
      253,  256,  250,  253,  252,  254,  255,  253,  319,    0,
      256,  252,  254,  255,  321,  256,  254,  255,  257,  258,
      257,  256,  258,  316,  317,  322,  318,  253,  256,    0,
      260,  323,  254,  255,  259,  319,  259,  256,  257,  258,

      260,  321,  256,  259,  324,  257,  258,  257,  256,  258,
      260,  259,  322,    0,  266,  261,  259,  260,  323,    0,
      262,  259,    0,  259,  262,  257,  258,  260,  261,  263,
      259,  324,  263,  264,  266,  261,    0,  260,  259,    0,
      264,  266,  261,  259,  262,  325,  265,  262,  269,  267,
      275,  262,  263,  264,  265,  261,  263,  267,    0,  263,
      264,  266,  261,  268,  269,  265,  265,  264,  269,  267,
      275,  262,  325,  265,  268,  269,  267,  275,  270,  263,
      264,  265,  270,  268,  267,  270,  271,  271,    0,    0,
      268,  269,  265,  265,  326,  269,  267,  275,  270,  272,

      327,  268,  274,  272,  273,  270,    0,  271,  276,  270,
      268,  273,  270,  271,  271,  274,  277,  273,  328,  272,
      277,  326,  274,  276,  273,  270,  272,  327,  276,  274,
      272,  273,  329,  303,  271,  276,  330,  303,  273,  331,
      277,  332,  274,  277,  273,  328,  272,  277,  333,  274,
      276,  273,  303,  334,  335,  276,  336,  338,  339,  329,
      303,  337,  341,  330,  303,  342,  331,  277,  332,  343,
      344,  337,  345,  346,  348,  333,  349,  350,  351,  303,
      334,  335,  353,  336,  338,  339,  354,  355,  337,  341,
      356,  357,  342,  358,  359,  360,  343,  344,  337,  345,

      346,  348,  361,  349,  350,  351,  362,  363,  364,  353,
      365,  366,  367,  354,  355,  368,  370,  356,  357,  371,
      358,  359,  360,  372,  373,  375,  376,  377,  378,  361,
      381,  380,  381,  362,  363,  364,  382,  365,  366,  367,
      380,  383,  368,  370,  384,  385,  371,  386,  387,  388,
      372,  373,  375,  376,  377,  378,  389,  381,  380,  381,
      389,  390,  391,  382,  394,  395,  396,  380,  383,    0,
      397,  384,  385,    0,  386,  387,  388,  505,  399,    0,
      401,    0,  506,  389,  394,  395,  396,  389,  390,  391,
      397,  394,  395,  396,  398,  400,  402,  397,  399,  400,

      401,  398,    0,    0,  505,  399,  402,  401,  405,  506,
      405,  394,  395,  396,  398,    0,  402,  397,  403,  400,
      507,  398,  400,  402,  404,  399,  400,  401,  398,  406,
      405,  404,  407,  402,  508,  405,  403,  405,  403,    0,
      408,  398,  406,  402,  404,  403,  400,  507,  407,  406,
      409,  404,  407,  411,  409,  408,  406,  405,  404,  407,
      408,  508,  412,  403,  410,  403,  412,  408,  413,  406,
      509,  404,  510,  411,  409,  407,  406,  409,  410,  407,
      411,  409,  408,  414,  410,    0,  412,  408,  413,  412,
      414,  410,  415,  412,    0,  413,  415,  509,  418,  510,

      411,  409,  416,  414,    0,  410,  416,    0,    0,    0,
      414,  410,  417,  412,  417,  413,  415,  414,  418,  415,
      419,  416,  422,  415,    0,  418,  416,    0,  420,  416,
      414,  420,  423,  416,  417,  419,  425,  512,  515,  417,
      419,  417,  422,  415,    0,  418,  421,  419,  416,  422,
      424,  420,  423,  416,  424,  420,  425,  421,  420,  423,
        0,  417,  419,  425,  512,  515,  421,  419,  426,  422,
      426,  427,  430,  421,  424,    0,  429,  424,  420,  423,
      428,  424,  431,  425,  421,  427,  430,  428,  516,  429,
      426,  427,  430,  421,    0,  426,  429,  426,  427,  430,

      428,  424,  431,  429,  432,  433,    0,  428,  432,  431,
        0,    0,  427,  430,  428,  516,  429,  426,  427,  430,
      437,  436,  434,  429,  436,  433,  435,  428,  432,  431,
      434,  432,  433,  435,  438,  432,  437,  438,  440,  439,
      437,  440,  434,  439,  436,    0,  435,  437,  436,  434,
        0,  436,  433,  435,  438,  432,  517,  434,  440,  439,
      435,  438,  441,  437,  438,  440,  439,  437,  440,  434,
      439,  436,  442,  435,  444,  443,    0,  441,  447,    0,
      448,  438,  441,  517,  444,  440,  439,  442,  443,  441,
      445,    0,  442,  446,  444,  443,  445,    0,  447,  442,

      448,  444,  443,  446,  441,  447,  449,  448,  450,  441,
      445,  444,  518,  446,  442,  443,  451,  445,  450,  442,
      446,  444,  443,  445,  453,  447,  449,  448,  450,  452,
      446,  519,  451,  449,  455,  450,  451,  445,  452,  518,
      446,    0,  454,  451,  453,  450,  456,  457,  457,  452,
      456,  453,  521,  449,  455,  450,  452,  454,  519,  451,
      522,  455,  454,  451,  523,  452,  456,  524,  457,  454,
      459,  453,  459,  456,  457,  457,  452,  456,  458,  521,
      462,  455,  458,  461,  454,  461,  460,  522,    0,  454,
      459,  523,    0,  456,  524,  457,  462,  459,  464,  459,

      462,  463,  458,  461,  465,  458,  460,  462,  460,  458,
      461,  525,  461,  460,  464,  466,  463,  459,  464,  467,
      468,  463,  466,  462,  465,  464,  527,  462,  463,  458,
      461,  465,  467,  460,  468,  466,  469,  470,  525,  467,
      468,  464,  466,  463,    0,  464,  467,  468,  463,  466,
      471,  465,    0,  527,  471,  528,  469,  470,    0,  467,
      472,  468,  466,  469,  470,  473,  467,  468,  529,  472,
      474,  475,    0,  475,  471,  476,  473,  471,  474,  476,
      472,  471,  528,  469,  470,  473,    0,  472,  478,  477,
      474,  478,  473,  475,  479,  529,  472,  474,  475,  476,

      475,  471,  476,  473,  477,  474,  476,  472,  478,  477,
      481,    0,  473,  480,  479,  478,  477,  474,  478,  482,
      475,  479,    0,  480,  483,    0,  476,    0,  484,  487,
      481,  477,  485,  480,  491,  478,  477,  481,  486,  482,
      480,  479,  483,  484,  483,  486,  482,  485,  484,  487,
      480,  483,  485,  488,  491,  484,  487,  481,  486,  485,
      480,  491,  489,  492,  488,  486,  482,  532,    0,  483,
      484,  483,  486,  488,  485,  484,  487,  489,  490,  485,
      488,  491,  489,  492,    0,  486,  493,  490,  497,  489,
      492,  488,    0,    0,  532,  493,    0,  497,  490,  496,

      488,  495,  533,  496,  489,  490,  493,  494,  497,  489,
      492,  495,  534,  493,  490,  497,  498,  494,  499,  494,
      499,  495,  493,  496,  497,  490,  496,  494,  495,  533,
      496,  500,  498,  493,  494,  497,  498,  501,  495,  534,
      499,    0,  535,  498,  494,  499,  494,  499,  495,  500,
      496,  500,  501,  502,  494,  536,  537,  501,  500,  498,
      538,  504,  502,  498,  501,  503,  502,  499,  503,  535,
      540,  543,  544,  502,  504,  546,  500,  549,  500,  501,
      502,  504,  536,  537,  501,  503,  551,  538,  504,  502,
      552,  553,  503,  502,  554,  503,  555,  540,  543,  544,

      502,  504,  546,  556,  549,  557,  559,  563,  504,  565,
      567,  568,  503,  551,  569,  569,  557,  552,  553,  570,
      571,  554,  573,  555,  574,  575,  576,  577,  579,  580,
      556,  581,  557,  559,  563,  582,  565,  567,  568,  583,
      584,  569,  569,  557,  585,  586,  570,  571,  587,  573,
      589,  574,  575,  576,  577,  579,  580,  590,  581,  591,
      592,  595,  582,  597,  598,  599,  583,  584,  600,  601,
      602,  585,  586,  603,  604,  587,  606,  589,  608,    0,
        0,  719,    0,    0,  590,    0,  591,  592,  595,  611,
      597,  598,  599,  612,  613,  600,  601,  602,  614,  615,

      603,  604,  611,  606,  616,  608,  612,  617,  719,  611,
      619,  618,  615,  612,  613,  618,  611,    0,  614,  615,
      612,  613,  721,  620,  616,  614,  615,  617,  722,  611,
      619,  616,  723,  612,  617,  618,  611,  619,  618,  615,
      612,  613,  618,  620,  621,  614,  615,  622,  623,  721,
      620,  616,  621,  625,  617,  722,  625,  619,  624,  723,
      622,  626,  618,  623,  621,    0,  627,  622,  623,  629,
      620,  621,  624,  627,  622,  623,  625,  630,  624,  621,
      625,  626,  628,  625,    0,  624,  627,  622,  626,  629,
      623,  621,  630,  627,  622,  623,  629,  630,  628,  624,

      627,  632,  628,  625,  630,  624,  631,    0,  626,  628,
      631,  634,  633,  627,  633,  634,  629,    0,    0,  630,
      635,  632,  724,  636,  630,  628,  637,  635,  632,  628,
      631,  634,    0,  631,  633,  725,  726,  631,  634,  633,
      635,  633,  634,  636,  638,  639,  637,  635,  632,  724,
      636,    0,    0,  637,  635,  638,  639,  631,  634,  640,
      728,  633,  725,  726,  638,  639,    0,  635,  644,  641,
      636,  638,  639,  637,  642,  640,  643,  645,  642,  640,
      643,    0,  638,  639,  641,    0,  640,  728,  644,  641,
      647,  638,  639,  646,  648,  644,  641,  645,  642,  651,

      643,  642,  640,  643,  645,  642,  640,  643,  646,  653,
      647,  641,  650,  646,  648,  644,  641,  647,  649,  651,
      646,  648,  649,  650,  645,  642,  651,  643,  654,  653,
        0,  653,  650,  656,  652,  646,  653,  647,  657,  650,
      646,  648,  649,  652,  658,  649,  651,  655,  654,  649,
      650,  657,    0,  656,  652,  654,  653,  655,  657,  650,
      656,  652,    0,  659,  658,  657,  661,  655,  660,  649,
      652,  658,  664,    0,  655,  654,  659,    0,  657,  661,
      656,  652,    0,  659,  655,  657,  661,  660,  660,  662,
      659,  658,  664,  661,  655,  660,    0,  665,  663,  664,

      663,  666,  662,  659,  665,    0,  661,    0,  729,  662,
      659,  663,  667,  661,  660,  660,  662,  665,  663,  664,
      668,  666,  669,  670,  665,  663,  671,  663,  666,  662,
      730,  665,  667,  671,  672,  729,  662,  669,  663,  667,
      668,    0,  669,  670,  665,  663,  671,  668,  666,  669,
      670,  673,  674,  671,  672,    0,    0,  730,    0,  667,
      671,  672,  673,  731,  669,  678,    0,  668,  675,  669,
      670,  673,  674,  671,  676,  732,  680,  676,  673,  674,
      677,  672,  675,  675,  679,  678,  679,    0,  675,  673,
      731,    0,  678,  677,  676,  675,  680,  684,  673,  674,

      677,  676,  732,  680,  676,  681,  679,  677,    0,  675,
      675,  679,  678,  679,  683,  675,  682,  684,  681,    0,
      677,  676,  683,  680,  684,  681,  685,  677,    0,  682,
      685,  686,  681,  679,  683,  686,  682,    0,    0,  688,
      687,  683,  734,  682,  684,  681,  687,  688,  735,  683,
      685,  689,  681,  685,    0,  686,  682,  685,  686,  688,
      687,  683,  686,  682,  689,  690,  688,  687,  691,  734,
      692,  689,    0,  687,  688,  735,  691,  685,  689,  692,
      690,  694,  686,  736,  695,  690,  688,  687,  691,    0,
      692,  689,  690,  697,  693,  691,  693,  692,  689,  699,

      737,  694,  700,  691,  695,  696,  692,  690,  694,  696,
      736,  695,  690,  697,  698,  691,  693,  692,  702,  699,
      697,  693,  700,  693,  698,  696,  699,  737,  694,  700,
      701,  695,  696,  703,  698,  703,  696,  738,  702,  704,
      697,  698,  739,  693,  701,  702,  699,  705,  704,  700,
      701,  698,  696,  707,  706,  703,  709,  701,  706,  704,
      703,  698,  703,  705,  738,  702,  704,  705,  707,  739,
        0,  701,  711,  707,  705,  704,  709,  701,  706,  740,
      707,  706,  703,  709,  713,  706,  704,  708,  710,  708,
      705,  710,  711,  712,  705,  707,  741,  714,  742,  711,

      707,  715,  716,  709,  713,  706,  740,  708,  710,  712,
      745,  713,  747,  712,  708,  710,  708,  714,  710,  711,
      712,  715,  716,  741,  714,  742,  748,  749,  715,  716,
      750,  713,  752,  755,  708,  710,  712,  745,  756,  747,
      712,  757,  758,  761,  714,  764,  766,  767,  715,  716,
      768,  771,  772,  748,  749,  773,  775,  750,  776,  752,
      755,  778,  779,  780,  781,  756,  782,  783,  757,  758,
      761,  784,  764,  766,  767,  785,  786,  768,  771,  772,
      788,  789,  773,  775,  790,  776,  792,  793,  778,  779,
      780,  781,  794,  782,  783,  796,  797,  798,  784,    0,

      799,  800,  785,  786,    0,  801,  875,  788,  789,  802,
      802,  790,    0,  792,  793,  796,  797,  798,  798,  794,
      799,  800,  796,  797,  798,  801,  803,  799,  800,  804,
      802,  805,  801,  875,  806,  803,  802,  802,    0,  804,
      808,    0,  796,  797,  798,  798,  803,  799,  800,  804,
      808,  805,  801,  803,  806,  807,  804,  802,  805,  807,
      808,  806,  803,  809,  810,  811,  804,  808,  812,  877,
      809,    0,    0,  803,  813,    0,  804,  808,  805,  807,
      815,  806,  807,  809,  810,  811,  807,  808,  812,  813,
      809,  810,  811,  814,  813,  812,  877,  809,  816,  817,

      815,  813,  814,  878,    0,    0,  807,  815,  818,    0,
      809,  810,  811,  814,  817,  812,  813,  819,  816,  817,
      814,  813,    0,  818,  879,  816,  817,  815,  818,  814,
      878,  819,  820,  822,  823,  818,  820,  819,    0,    0,
      814,  817,    0,    0,  819,  816,  817,  821,  825,  821,
      818,  879,  820,  822,  823,  818,    0,  880,  819,  820,
      822,  823,  829,  820,  819,  824,  827,  830,  825,  821,
      828,  826,  824,  826,  821,  825,  821,  827,    0,  820,
      822,  823,  829,  828,  880,  824,  827,  830,  831,  829,
      828,  826,  824,  827,  830,  825,  821,  828,  826,  824,

      826,  832,  833,  831,  827,  834,  835,  838,  831,  829,
      828,  882,  824,  827,  830,  831,    0,  828,  826,  839,
      834,  832,  833,  836,  837,  834,  835,  838,  832,  833,
      831,  837,  834,  835,  838,  831,  841,  836,  882,  839,
      842,  843,  840,  836,  837,  844,  839,  834,  832,  833,
      836,  837,  834,  835,  838,  840,  841,  883,  837,  847,
      842,  843,  840,  841,  836,  844,  839,  842,  843,  840,
      836,  837,  844,  845,  847,  846,  848,  845,  846,  847,
        0,    0,  840,  841,  883,    0,  847,  842,  843,  840,
      849,  850,  844,  853,  851,  846,  848,  845,    0,  852,

      845,  847,  846,  848,  845,  846,  847,  851,  854,    0,
      849,  850,  852,  853,  851,    0,  856,  849,  850,  852,
      853,  851,  846,  848,  845,  855,  852,  857,  854,  855,
        0,  857,  858,  858,  851,  854,  856,  849,  850,  852,
      853,  851,  859,  856,  884,  855,  852,  860,  860,  885,
      862,  857,  855,  858,  857,  854,  855,  859,  857,  858,
      858,  861,  859,  856,  862,  861,  863,  864,  860,  859,
      862,  884,  855,    0,  860,  860,  885,  862,  857,  863,
      858,  866,  864,  867,  859,  861,  863,  864,  861,  859,
        0,  862,  861,  863,  864,  860,  865,  862,  868,  868,

      865,  866,  869,  867,  870,    0,  863,  888,  866,  864,
      867,    0,  861,  863,  864,  874,  892,  872,  871,  868,
      865,  872,  869,  865,  870,  868,  868,  865,  866,  869,
      867,  870,  871,  873,  888,  874,  894,  873,  871,  895,
      898,  872,  874,  892,  872,  871,  868,  865,  872,  869,
      899,  870,  903,  904,  906,  908,  909,  873,  911,  871,
      873,  912,  874,  894,  873,  871,  895,  898,  872,  913,
      915,  916,  920,  922,  923,  924,  929,  899,  930,  903,
      904,  906,  908,  909,  873,  911,  931,  932,  912,  934,
      992,  937,    0,  993,    0,  933,  913,  915,  916,  920,

      922,  923,  924,  929,  933,  930,  931,  932,    0,  934,
      935,  937,  936,  931,  932,  933,  934,  992,  937,  936,
      993,  938,  933,  939,  935,  939,  941,  941,    0,  940,
      935,  933,  936,  931,  932,  938,  934,  935,  937,  936,
      942,  938,  933,  943,  940,  939,  936,  941,  938,  940,
      939,  935,  939,  941,  941,  945,  940,  935,  946,  936,
      942,  947,  938,  943,  944,    0,  944,  942,  938,  948,
      943,  940,  939,    0,  941,  945,  940,  949,  946,  951,
      952,  947,  945,  950,    0,  946,  944,  942,  947,  948,
      943,  944,  950,  944,  951,  953,  948,  949,  954,  951,

      952,    0,  945,  950,  949,  946,  951,  952,  947,  955,
      950,  954,  956,  944,  957,  953,  948,  958,  954,  950,
      959,  951,  953,  960,  949,  954,  951,  952,  961,  955,
      950,  962,  956,  959,  957,  962,  955,  958,  954,  956,
      959,  957,  953,  960,  958,  954,  963,  959,  961,  966,
      960,  962,  996,  965,  968,  961,  955,  965,  962,  956,
      959,  957,  962, 1000,  958,  964,  963,  959,  967,  966,
      960,  969,  964,  963,  968,  961,  966,  965,  962,  996,
      965,  968,  970,  967,  965,  964,  972,  973,  967,    0,
     1000,  969,  964,  963, 1003,  967,  966,  974,  969,  964,

      972,  968,  970,  971,  965,  971,  972,  973,  975,  970,
      967,  977,  964,  972,  973,  967,  976,  974,  969,    0,
      981, 1003,  978,  976,  974,  971,  978,  972,  975,  970,
      971,  977,  971,  972,  973,  975,  976,  979,  977,  980,
      981,  979,  982,  976,  974,  983,  978,  981,    0,  978,
      976,  984,  971,  978,  980,  975, 1004,  985,  977,  980,
     1006,  979,  982,  976,  979,  983,  980,  981,  979,  982,
      985,  984,  983,  978, 1007,  986, 1010,  985,  984, 1013,
     1014,  980,  986, 1004,  985, 1015,  980, 1006,  979,  982,
     1018, 1019,  983, 1020, 1021,  986, 1022,  985,  984, 1023,

        0, 1007,  986, 1010,  985, 1025, 1013, 1014,    0,  986,
     1018, 1019, 1015, 1020, 1021, 1026, 1022, 1018, 1019, 1023,
     1020, 1021,  986, 1022, 1024, 1025, 1023, 1028, 1024, 1027,
     1029,    0, 1025, 1030, 1050, 1026,    0, 1018, 1019,    0,
     1020, 1021, 1026, 1022, 1027, 1032, 1023, 1028, 1024, 1027,
     1029, 1024, 1025, 1030, 1028, 1024, 1027, 1029, 1033, 1031,
     1030, 1050, 1026, 1031,    0, 1032, 1034, 1036, 1034, 1037,
        0, 1027, 1032, 1052, 1028, 1024, 1027, 1029, 1033, 1031,
     1030, 1035, 1037, 1038, 1039, 1033, 1031, 1036, 1034, 1037,
     1031, 1035, 1032, 1034, 1036, 1034, 1037, 1040,    0, 1042,

     1052, 1035,    0, 1038, 1039, 1033, 1031, 1041, 1035, 1037,
     1038, 1039, 1043,    0, 1036, 1034, 1037, 1040, 1035, 1042,
     1044, 1045, 1041, 1046, 1040, 1047, 1042, 1041, 1035, 1045,
     1038, 1039, 1043, 1044, 1041, 1048, 1053, 1054, 1056, 1043,
     1044, 1045, 1058, 1046, 1040, 1047, 1042, 1044, 1045, 1041,
     1046, 1059, 1047, 1061, 1041, 1048, 1045, 1063,    0, 1043,
     1044, 1062, 1048, 1053, 1054, 1056, 1073, 1044, 1045, 1058,
     1046, 1065, 1047, 1061, 1066, 1064, 1062, 1063, 1059, 1067,
     1061, 1062, 1048,    0, 1063, 1064, 1065, 1066, 1062,    0,
     1069, 1065,    0, 1073, 1066, 1064, 1068, 1074, 1065, 1067,

     1061, 1066, 1064, 1062, 1063, 1070, 1067, 1072, 1062, 1068,
     1069, 1076, 1064, 1065, 1066, 1077, 1068, 1069, 1065, 1071,
     1080, 1066, 1064, 1068, 1074, 1070, 1067, 1072, 1081, 1082,
     1071, 1083, 1070, 1085, 1072, 1083, 1068, 1069, 1076, 1071,
     1080, 1081, 1077, 1068, 1086, 1084, 1071, 1080, 1081, 1082,
     1088, 1083, 1070, 1085, 1072, 1081, 1082, 1071, 1083, 1084,
     1085, 1089, 1083, 1091, 1086, 1084, 1071, 1080, 1081, 1092,
     1095, 1086, 1084, 1092,    0, 1081, 1082, 1088, 1083, 1093,
     1085, 1094, 1096, 1091, 1098, 1099, 1084, 1097, 1089, 1092,
     1091, 1086, 1084, 1101, 1093, 1102, 1092, 1095, 1104, 1093,

     1092, 1094, 1097,    0, 1098,    0, 1093, 1097, 1094, 1096,
     1091, 1098, 1099, 1101, 1097, 1102, 1092,    0, 1104,    0,
     1101, 1093, 1102,    0,    0, 1104, 1093,    0, 1094, 1097,
        0, 1098,    0,    0, 1097,    0,    0,    0,    0,    0,
     1101,    0, 1102,    0,    0, 1104, 1106, 1106, 1106, 1106,
     1106, 1107,    0,    0, 1107, 1107, 1109, 1109, 1109,    0,
     1109, 1110,    0, 1110, 1110, 1110, 1111,    0, 1111, 1111,
     1111, 1112,    0, 1112, 1112, 1112, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../../include/sqlparser/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweaks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1824 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2112 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1106 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1105 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(HIGH_PRIORITY)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(LOW_PRIORITY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(DELAYED)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(IGNORE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(QUICK)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 141:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 148:
#line 212 "flex_lexer.l"
case 149:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 234 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 237 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 239 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2973 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1106 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1106 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1105);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 242 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

