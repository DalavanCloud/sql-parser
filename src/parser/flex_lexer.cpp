#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1026] =
    {   0,
        0,    0,  149,  149,    2,    2,  153,  151,    4,    4,
      151,  151,  141,  147,  141,  141,  144,  141,  141,  141,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  141,  149,  150,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  136,    0,    1,  144,
      143,  142,  138,  137,  135,  139,  146,  146,  146,  146,

      146,  146,  118,  146,  119,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      120,  146,  146,  121,  122,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  123,  124,  125,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  126,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  140,  149,  148,    2,
        2,    2,    2,    1,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  145,  142,  104,  146,  105,  146,  146,  106,
      146,  107,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  108,  146,  130,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  109,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  110,  146,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  111,  146,
      146,  112,  146,  146,  146,  146,  146,  146,  146,  146,
      146,  146,  113,  146,  146,  114,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  115,  146,
      146,  146,  146,  116,  146,  146,  146,  146,  117,  146,
      146,  146,  146,  146,  146,  146,  146,  146,  146,  146,
      146,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      146,  146,  146,  146,  146,  146,   76,  146,   77,   78,

      146,  146,  146,  146,   79,  146,  146,  146,  146,   80,
      146,  146,  146,   81,   82,  146,  146,  146,  146,  146,
      146,  146,   83,  146,   84,   85,  146,  146,   86,  146,
       87,  146,  129,  146,  146,  146,  146,  146,  146,   88,
      146,   89,   90,   91,  146,   93,  146,   94,  146,  146,
      146,  146,   95,  146,  146,  146,  146,  146,   96,  146,
      146,  146,  146,  146,  146,  146,  146,   97,  146,  146,
      146,  146,   98,   99,  100,  133,  146,  146,  146,  146,
      146,  146,  146,  146,  101,  146,  102,  146,  103,  132,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       56,   57,  146,   58,  146,  146,  146,  146,  146,  146,

       59,  146,  146,  146,   60,  146,  146,  146,  146,  146,
      146,  146,  146,  146,  134,   61,  146,   62,  146,  146,
       92,  146,   63,   64,  146,  146,  146,  146,   65,   66,
       67,   68,  146,  131,  146,  146,  146,   69,   70,  146,
      146,  146,  146,  146,   71,  146,  146,  146,  146,  146,
       72,  146,  146,  146,   73,  146,  146,  146,   74,  146,
      146,  146,   75,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,  146,   31,  146,  146,
       32,  146,   33,  146,  146,   34,   35,  146,   36,   37,
       38,  146,   39,  146,  146,   41,   42,  146,   43,   44,
      146,  146,   45,  128,  146,  146,   46,  146,  146,  146,
       47,  146,   48,  127,   49,   50,  146,   51,  146,  146,
      146,   52,   53,   54,   55,  146,  146,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,   14,   15,
       16,   17,   18,  146,   19,  146,   20,   21,   40,   22,
       23,  146,   24,  146,  146,   25,   26,  146,   27,   28,
      146,  146,  146,   29,   30,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  146,   10,  146,   11,  146,   12,  146,  146,

       13,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      146,    7,  146,    8,    9,    2,    2,    2,    2,    2,
        5,    6,    2,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        6,    1,    6,    6,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,    6,   68,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[69] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1033] =
    {   0,
        0,    0,  490,  476,   68,    0,  482, 4073,  135,  137,
      424,    0, 4073, 4073,  133,  393,  135,  134,  389,  359,
        0,  130,  130,  138,  136,  146,  197,  177,  185,  218,
      125,  142,  202,  214,  239,  256,  251,  244,  270,  313,
      252,  192,  274,  145,  292,    0,  344,    0,  202,  214,
      334,  317,    0,    0,  214,  298,  209,  249,  293,  286,
      372,  440,  508,  562,  614,  662,  714,  356,  302,  762,
      301,  267,  367,  368,  814,  862,  435,  389,  912,  964,
      503,  509,  440,  391,  211,  335, 4073,  264, 4073,  340,
      247,  239, 4073, 4073, 4073, 4073,    0,  148,  179,  366,

      460,  196,  317,  409,    0,  372,  324,  443,  370,  307,
      484,  520,  361,  369,  382,  431,  447,  459,  566,  454,
      458,  496,  497,  501,  508,  508,  509,  508,  554,  504,
        0,  520,  542,  597,  550,  556,  547,  570,  607,  621,
      560,  565,  569,  601,  605,  614,  626,  624,    0,  627,
      613,  616,  635,  632,  651,  648,  661,  686,  657,  655,
      674,  675,  666,  667,  678,  671,  669,  669,  712,  689,
      686,  716,  725,  704,  707,  730, 4073,    0, 4073,    0,
      351,    0,  205,    0,  355,  192,  163,    0,    0,    0,
        0,  739,  768,  758,  801,  826,  764,  820,  859,  760,

      877,  872,  907,  792,  908,  931, 1016,  956,  966,  856,
     1000,  945, 1008, 1066,  998, 1022, 1038, 1040, 1051, 1072,
     1074, 1090, 1095, 1114, 1124,  999, 1125, 1138, 1187, 1126,
     1143, 1148, 1177, 1183, 1235, 1179, 1200, 1212, 1222, 1225,
     1243, 1261, 1265, 1253, 1275, 1276, 1286, 1287, 1305, 1315,
     1317, 1327, 1343, 1328, 1340, 1349, 1381, 1359, 1383, 1384,
     1389, 1412, 1399, 1413, 1435, 1394, 1438, 1443, 1437, 1453,
     1471,    0, 4073,  147,    0,  747,    0,  772,  772,    0,
      821,    0,  813,  809,  831, 1105,  829,  878,  898,  924,
      912,    0,  930,    0,  929,  952, 1166,  964,  980,  995,

     1065, 1122, 1157,    0, 1192, 1211, 1243, 1237, 1282, 1281,
     1290, 1361, 1377,    0, 1387, 1420, 1451, 1433, 1449, 1462,
     1454, 1459, 1464, 1475, 1476, 1487, 1488, 1489, 1492, 1481,
     1490,    0, 1488, 1505, 1502, 1508, 1513, 1508, 1509, 1496,
     1502, 1504,    0, 1514, 1509, 1509, 1525, 1527, 1532, 1522,
     1524, 1532, 1545, 1527, 1540, 1545, 1536, 1551,    0, 1535,
     1541, 1542, 1552,    0, 1549, 1546, 1554, 1564,    0, 1565,
     1565, 1556, 1575, 1567, 1563, 1583, 1564, 1570, 1586, 1586,
     1581,    0,  142, 1597, 1600, 1605, 1610, 1611, 1613, 1619,
     1614, 1643, 1649, 1628, 1673, 1659, 1665, 1668, 1682, 1677,

     1687, 1701, 1703, 1719, 1717, 1716, 1727, 1722, 1741, 1735,
     1760, 1745, 1757, 1779, 1770, 1791, 1781, 1793, 1810, 1805,
     1794, 1833, 1815, 1831, 1847, 1848, 1843, 1873, 1865, 1864,
     1882, 1888, 1898, 1907, 1899, 1910, 1913, 1922, 1923, 1938,
     1921, 1936, 1952, 1967, 1962, 1977, 1990, 1991, 1986, 1981,
     2005, 1995, 2027, 2026, 2016, 2031, 2035, 2044, 2050, 2045,
     2060, 2079, 2069, 2085, 2081, 2090, 2093, 2094, 2104, 2103,
     2119, 2135, 2109, 2133, 2143, 2148, 2147, 2152, 2177, 2181,
     2178, 2187, 2202, 2176, 2232, 2217, 2206, 2227, 2255, 2256,
     1583, 1616, 1664, 1731, 1763, 1785,    0, 1813,    0,    0,

     1826, 1831, 1872, 1875,    0, 1946, 1960, 2034, 2102,    0,
     2140, 2169, 2182,    0,    0, 2201, 2230, 2227, 2230, 2250,
     2254, 2251,    0, 2245,    0,    0, 2265, 2254,    0, 2257,
        0, 2261,    0, 2280, 2268, 2265, 2273, 2276, 2288,    0,
     2284,    0,    0,    0, 2279,    0, 2288,    0, 2297, 2285,
     2301, 2292,    0, 2308, 2309, 2297, 2299, 2306,    0, 2319,
     2323, 2312, 2310, 2310, 2321, 2321, 2336,    0, 2335, 2334,
     2340, 2333,    0,    0, 2330,    0, 2347, 2339, 2333, 2355,
     2338, 2352, 2355, 2355,    0, 2343,    0, 2360,    0,    0,
     2364, 2379, 2363, 2368, 2389, 2373, 2374, 2407, 2397, 2398,

     2423, 2422, 2413, 2432, 2437, 2441, 2447, 2451, 2476, 2465,
     2482, 2477, 2506, 2491, 2495, 2505, 2510, 2519, 2534, 2545,
     2551, 2536, 2550, 2560, 2559, 2564, 2573, 2588, 2585, 2594,
     2589, 2613, 2590, 2604, 2625, 2627, 2629, 2644, 2666, 2628,
     2663, 2658, 2661, 2662, 2687, 2692, 2696, 2698, 2700, 2717,
     2721, 2715, 2726, 2740, 2736, 2757, 2761, 2771, 2749, 2782,
     2790, 2772, 2803, 2800, 2814, 2812, 2826, 2811, 2825, 2836,
     2835, 2844, 2857, 2860, 2865, 2866, 2870, 2869, 2894, 2902,
     2888, 2899, 2900, 2931, 2918, 2923, 2932, 2933, 2936, 2942,
        0,    0, 2348,    0, 2412, 2456, 2488, 2491, 2491, 2517,

        0, 2521, 2548, 2595,    0, 2638, 2658, 2677, 2766, 2925,
     2929, 2934, 2950, 2957,    0,    0, 2950,    0, 2962, 2955,
        0, 2957,    0,    0, 2958, 2974, 2962, 2970,    0,    0,
        0,    0, 2985,    0, 2990, 2984, 2973,    0,    0, 2990,
     2979, 2980, 2994, 2992,    0, 3001, 2999, 2987, 3006, 3010,
     2993, 2995, 2994, 3014,    0, 3011, 3017, 3018,    0, 3008,
     3030, 3031,    0, 3028, 3030, 3031, 3039, 3040, 3041, 3063,
     3064, 3072, 3074, 3076, 3085, 3097, 3093, 3098, 3114, 3106,
     3108, 3116, 3137, 3139, 3148, 3147, 3160, 3149, 3150, 3183,
     3171, 3199, 3193, 3182, 3212, 3188, 3204, 3221, 3222, 3223,

     3238, 3247, 3253, 3255, 3256, 3257, 3261, 3266, 3287, 3291,
     3278, 3292, 3295, 3296, 3324, 3301, 3326, 3320, 3335, 3350,
     3341, 3360, 3369, 3352, 3378, 3375, 3404, 3354, 3394, 3409,
     3403, 3406, 3420, 3419, 3432, 3437, 3042,    0, 3035, 3080,
     3124, 3139,    0, 3227, 3229,    0,    0, 3386,    0,    0,
        0, 3385,    0, 3429, 3428,    0,    0, 3424,    0,    0,
     3432, 3448,    0,    0, 3442, 3458,    0, 3443, 3460, 3442,
        0, 3465, 3454,    0,    0,    0, 3462,    0, 3477, 3478,
     3462,    0,    0,    0,    0, 3465, 3473, 3482, 3483, 3488,
     3486, 3498, 3514, 3499, 3522, 3516, 3517, 3532, 3540, 3550,

     3551, 3553, 3554, 3555, 3576, 3568, 3566, 3572, 3584, 3589,
     3594, 3605, 3606, 3607, 3608, 3617, 3642, 3620, 3643, 3629,
     3630, 3639, 3648, 3660, 3661, 3671, 3672, 3693, 3682, 3683,
     3715, 3697, 3694, 3696, 3705, 3726, 3734, 3748,    0,    0,
        0,    0,    0, 3708,    0, 3707,    0,    0,    0,    0,
        0, 3735,    0, 3723, 3737,    0,    0, 3730,    0,    0,
     3737, 3743, 3756,    0,    0, 3759, 3765, 3767, 3769, 3770,
     3780, 3771, 3784, 3788, 3793, 3801, 3802, 3805, 3836, 3810,
     3833, 3823, 3824, 3838, 3839, 3842, 3847, 3855, 3864, 3876,
     3877, 3878, 3864,    0, 3872,    0, 3875,    0, 3870, 3881,

        0, 3893, 3901, 3907, 3909, 3918, 3910, 3912, 3933, 3941,
     3916,    0, 3928,    0,    0, 3946, 3947, 3950, 3952, 3955,
        0,    0, 3963, 3976, 4073, 4042, 4047,  137, 4052, 4057,
     4062, 4067
    } ;

static yyconst flex_int16_t yy_def[1033] =
    {   0,
     1025,    1, 1026, 1026, 1025,    5, 1025, 1025, 1025, 1025,
     1025, 1027, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1025, 1029, 1025, 1030, 1030, 1025,
     1030, 1031, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1032, 1032, 1032,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63, 1030, 1025, 1025, 1027, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1025, 1029, 1025, 1030,
     1030, 1030, 1031, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1030,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63, 1030, 1025, 1025, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1030, 1030,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1028, 1028,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63, 1028, 1028, 1028, 1028, 1028, 1028, 1028, 1028,

     1028,   63,   63,   63,   63,   63,   63,   63,   63,   63,
     1028, 1028, 1028, 1028, 1028,   63,   63,   63,   63,   63,
     1028, 1028,   63,   63,    0, 1025, 1025, 1025, 1025, 1025,
     1025, 1025
    } ;

static yyconst flex_uint16_t yy_nxt[4142] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       21,   38,   39,   40,   41,   42,   43,   21,   44,   21,
        8,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   21,   38,   39,
       40,   41,   42,   43,   21,   44,   21,   45,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
       60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   61,   78,

       79,   80,   81,   82,   83,   61,   84,   61,   48,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   61,   78,   79,   80,   81,
       82,   83,   61,   84,   61,   85,   86,   86,   86,   86,
       89,   97,   90,   92,   90,   93,   94,   98,  104,   99,
      111,  383,  106,  136,  112,  100,  274,  101,  113,  107,
      137,  102,  103,  176,  114,  275,  108,  115,  105,  109,
      110,  116,  383,  117,   98,  104,   99,  111,  118,  106,
      136,  112,  100,  119,  101,  113,  107,  137,  102,  103,
      176,  114,  275,  108,  115,  105,  109,  110,  116,  128,

      117,  186,  126,  181,   86,  118,  172,  129,  127,  382,
      119,  120,  276,  130,  173,   86,   86,  187,  185,  121,
      138,  184,  122,  185,  139,  123,  128,  281,  124,  126,
      140,  125,  141,  172,  129,  127,  142,  131,  120,  276,
      130,  173,  143,  132,  133,  134,  121,  138,  274,  122,
      135,  139,  123,  144,  281,  124,   91,  140,  125,  141,
      188,  189,  155,  142,  131,  152,  156,  145,  273,  143,
      132,  133,  134,  146,  147,  148,  153,  135,  272,  169,
      144,  170,  154,  149,  171,  232,  157,  150,  158,  155,
      151,  159,  152,  156,  145,  174,  175,  191,  160,  161,

      146,  147,  148,  153,  190,  192,  169,  186,  170,  154,
      149,  171,  232,  157,  150,  158,  223,  151,  159,  192,
      192,  180,  174,  175,  224,  160,  161,  162,  163,  231,
      225,  164,  192,  282,  165,  166,   86,   86,  287,  192,
      192,  167,  292,  223,  168,  182,  192,  192,   92,   90,
      179,  224,  181,   86,  162,  163,  231,  225,  164,  177,
      282,  165,  166,  187,  185,  287,  192,  192,  167,  292,
       96,  168,  180,  180,  192,  180,  180,  180,  180,  180,
      180,  221,  180,  180,  180,  233,  236,  222,  290,  234,
      237,  277,  299,  300,  192,  235,  238,  285,  291,  278,

       95,  192,   91,  301,  286,  192,  192,  250,  221,  271,
      302,  251,  233,  236,  222,  290,  234,  237,  277,  299,
      300,  192,  235,  238,  285,  291,  278,  192,  283,  192,
      301,  286,  192,  192,  250,   87,  271,  302,  251,  180,
      180,  180,  284,  180,  180,  180,  180,  180,  180,  247,
      180,  180,  180,  192,  192,  283,  192,  193,  192,  194,
      248,  269,  270,  303,  304,  195,  249,  196,  288,  284,
      289,  197,  198,  192,  279,  305,  247,  280,  192,  311,
      192, 1025,   47,  312,  193,  192,  194,  248,  269,  270,
      303,  304,  195,  249,  196,  288,   47,  289,  197,  198,

      192,  279,  305, 1025,  280,  192,  311,  180,  180,  180,
      312,  180,  180,  180,  180,  180,  180,  293,  180,  180,
      180,  192,  294,  267,  313, 1025,  199,  192,  314,  315,
      264,  268,  265,  316,  295,  266,  317,  318,  323,  296,
      319,  192,  324,  320,  293,  297,  200,  192,  192,  294,
      267,  313,  298,  199,  192,  314,  315,  264,  268,  265,
      316,  295,  266,  317,  318,  323,  296,  319,  192,  324,
      320,  325,  297,  200,  192,  180,  201,  330,  331,  298,
      192,  321,  306,  202,  307,  332,  322, 1025,  308,  333,
      203,  339,  340,  204,  205,  309,  341, 1025,  325,  310,

      192, 1025, 1025,  201,  330,  331, 1025,  192,  321,  306,
      202,  307,  332,  322,  326,  308,  333,  203,  339,  340,
      204,  205,  309,  341,  327, 1025,  310,  192,  206,  328,
      329,  334,  207,  335,  342,  336,  208,  337,  343,  344,
      345,  326,  209,  346,  347,  210,  348,  349,  338,  350,
      351,  327,  192, 1025,  352,  206,  328,  329,  334,  207,
      335,  342,  336,  208,  337,  343,  344,  345,  355,  209,
      346,  347,  210,  348,  349,  338,  350,  351,  353,  192,
      192,  352,  356,  354, 1025,  360,  361,  211,  362,  212,
      363,  364, 1025,  365,  213,  355,  367,  368,  369,  214,

      192, 1025,  357,  370,  366,  353,  373,  192,  374,  356,
      354,  358,  360,  361,  211,  362,  212,  363,  364,  359,
      365,  213,  379,  367,  368,  369,  214,  192,  215,  357,
      370,  366,  192,  373,  371,  374,  216,  372,  358,  217,
      380,  375,  218,  377,  381,  219,  359,  376,  220,  379,
     1025, 1025,  192, 1025, 1025,  215,  378,  192, 1025,  192,
     1025,  371, 1025,  216,  372,  491,  217,  380,  375,  218,
      377,  381,  219, 1025,  376,  220,  192,  192,  192,  192,
      192,  226,  192,  378,  192,  384,  192,  227,  228,  229,
      492,  385,  491, 1025,  230,  390,  192,  493,  192, 1025,

      192, 1025,  192,  192,  192,  192,  192,  192,  226,  192,
      399, 1025,  384,  192,  227,  228,  229,  492,  385,  192,
      400,  230,  390,  192,  493,  192,  386,  192,  239,  192,
      192, 1025,  192,  192,  387,  494,  391,  399,  192,  192,
      388,  495,  240,  389,  192,  496,  192,  400,  241,  242,
     1025, 1025,  192,  386, 1025,  239,  497,  192,  192,  192,
      500,  387,  494,  391,  192,  192,  192,  388,  495,  240,
      389,  192,  496, 1025,  192,  241,  242,  192,  392,  192,
      192,  243, 1025,  497,  411,  192,  396,  500, 1025,  244,
      192,  192,  393,  245,  192,  192,  246,  192, 1025, 1025,

      192,  192,  394, 1025,  192,  392, 1025,  192,  243,  395,
      192,  411,  501,  396, 1025,  192,  244,  192, 1025,  393,
      245,  192,  192,  246,  192,  192,  192,  192,  252,  394,
      253,  502,  397,  254,  398, 1025,  395,  192,  503,  501,
      255,  256,  192,  401,  504,  192,  192, 1025,  505,  192,
      192, 1025,  192,  192,  506,  252, 1025,  253,  502,  397,
      254,  398,  413,  192,  402,  503,  507,  255,  256,  403,
      401,  504,  192,  192,  192,  505,  192,  192,  257,  258,
      510,  506,  259,  192,  192,  260,  261,  408,  409,  413,
      192,  402,  262,  507,  192,  263,  403, 1025,  511, 1025,

      410,  192,  192, 1025,  192,  257,  258,  510, 1025,  259,
      192,  192,  260,  261,  408,  409,  192,  192,  192,  262,
     1025,  192,  263,  420,  414,  511,  192,  410,  512,  192,
      404,  192,  412, 1025,  192,  405,  192,  192,  192, 1025,
      192,  406, 1025,  192,  192,  192,  192,  421,  407, 1025,
      420,  414, 1025,  192,  192,  512,  192,  404,  192,  412,
      192,  192,  405,  192,  192,  192,  422,  192,  406,  192,
     1025,  423, 1025,  192,  421,  407,  192, 1025,  192,  424,
      513,  192,  415,  192,  416,  192, 1025,  192,  417,  192,
      192, 1025,  192,  422, 1025,  418,  192,  425,  423,  419,

     1025, 1025,  426,  192,  192,  192,  424,  513,  192,  415,
      192,  416,  192,  192, 1025,  417,  192,  192,  427,  192,
     1025,  498,  418,  499,  425, 1025,  419,  428,  192,  426,
      429,  192,  192,  192, 1025,  192, 1025,  192, 1025,  192,
      192,  430,  192,  192,  192,  427,  431,  433,  498, 1025,
      499,  514,  192,  439,  428,  192,  192,  429,  432,  192,
      192,  192,  192,  192,  192,  440,  192,  434,  430,  192,
      192,  192, 1025,  431,  433,  515,  192, 1025,  514,  192,
      439,  192, 1025,  192,  508,  432,  441, 1025,  192,  192,
      192,  192,  440,  192,  434,  192,  442,  192, 1025,  509,

     1025,  192,  515,  192,  435,  192,  516,  443,  192,  444,
      448,  508, 1025,  441,  436,  192, 1025,  192,  192,  437,
      438,  192,  192,  442,  192,  192,  509,  449,  192,  517,
      192,  435,  192,  516,  443, 1025,  444,  448,  192,  450,
      192,  436,  192,  192,  192,  192,  437,  438,  192,  445,
      192,  446,  192,  192,  449,  451,  517,  192,  452,  518,
      192,  192,  447,  192, 1025,  192,  450,  192,  453,  519,
      192,  192, 1025,  192, 1025,  454,  445,  192,  446,  192,
      192,  192,  451,  192,  455,  452,  518,  192,  192,  447,
      192,  192,  456,  192,  192,  453,  519, 1025,  192,  192,

      192,  459,  454,  192,  192,  192,  192,  520,  192,  457,
      192,  455,  521,  192,  192, 1025, 1025,  458,  192,  456,
      192,  192,  522,  460,  192,  192,  192,  461,  459, 1025,
      192,  192,  192,  192,  520,  192,  457,  464, 1025,  521,
      192,  192,  462,  192,  458,  192,  192,  463,  465,  522,
      460,  192,  192,  192,  461,  192,  469, 1025,  192,  466,
      192,  192,  192,  471,  464,  192,  192,  192,  467,  462,
      192,  470,  192,  192,  463,  465,  468,  192,  192,  523,
      192,  192,  192,  469,  473,  192,  466,  192,  192, 1025,
      471,  524,  192,  192,  192,  467,  472,  192,  470,  192,

     1025,  192,  476,  468,  192,  192,  523,  192,  192,  474,
     1025,  473,  192,  525,  192,  477,  483,  192,  524,  192,
      475,  192,  192,  472,  192, 1025,  192,  192,  192,  476,
      192,  192,  192,  479,  192,  480,  474,  192,  481,  192,
      525,  478,  477,  483,  192,  526,  192,  475,  192,  192,
      192,  192,  482,  192,  192,  488,  192,  192,  192,  192,
      479,  486,  480,  484,  192,  481,  527,  528,  478,  485,
      529,  192,  526,  192,  487,  192,  192,  192,  192,  482,
      192,  192,  488,  192,  530,  490,  489,  531,  486,  192,
      484,  192,  532,  527,  528,  533,  485,  529,  192,  534,

      192,  487,  192,  192,  535,  536,  537,  538,  192,  192,
      539,  530,  490,  489,  531,  541,  192,  542,  192,  532,
      540,  543,  533,  544,  545,  546,  534,  547,  548,  549,
      550,  535,  536,  537,  538,  551,  192,  539,  552,  553,
      554,  555,  541,  556,  542,  557,  558,  540,  543,  559,
      544,  545,  546,  560,  547,  548,  549,  550,  561,  562,
      563,  564,  551,  565,  566,  552,  553,  554,  555,  567,
      556,  568,  557,  558,  569,  570,  559,  571,  572,  573,
      560,  574,  575,  576,  580,  561,  562,  563,  564,  581,
      565,  566,  577,  578,  582,  579,  567,  583,  568,  584,

      585,  569,  570,  586,  571,  572,  573,  589,  574,  575,
      576,  580,  590,  587,  691,  192,  581,  588,  591,  577,
      578,  582,  579,  192,  583, 1025,  584,  585,  592,  192,
      586,  192,  192,  594,  589,  192,  593,  192,  192,  590,
      587,  691,  192,  192,  588,  591,  192,  692,  192,  192,
      192,  192,  192,  597, 1025,  592,  192,  192,  192,  192,
      594,  192,  192,  593,  192,  192,  192,  192, 1025, 1025,
      192,  595, 1025,  192,  692,  192,  192,  192,  192,  192,
      597,  192, 1025,  192,  192,  596,  192,  192,  192,  598,
      600,  599, 1025,  192,  192,  192,  603,  192,  595,  601,

      192,  602,  693,  192,  192,  192,  192, 1025,  192,  604,
      192,  192,  596,  192,  192,  192,  598,  600,  599,  605,
      192,  192,  192,  603,  192,  192,  601,  192,  602,  693,
      192,  607,  192,  192,  608,  192,  604,  192,  192,  192,
      611,  192,  192,  610,  606,  192,  605,  192,  192,  609,
      613, 1025,  192,  192,  192,  192, 1025,  192,  607,  192,
      192,  608,  192,  615,  192,  192,  192,  611,  192,  694,
      610,  606,  192,  192,  612,  192,  609,  613,  192,  192,
      192,  192,  192,  192,  192, 1025,  192,  192,  617,  614,
      615, 1025,  192,  616,  695,  192,  694,  192,  192,  192,

      192,  612,  192,  696, 1025,  192,  192,  618,  192,  192,
      192,  192,  623,  619, 1025,  617,  614,  192,  620,  192,
      616,  695,  192,  192,  192,  192,  192,  697,  192,  192,
      696,  192,  192,  192,  618,  192,  192,  622,  192,  623,
      619,  621, 1025,  192,  192,  620,  192,  624,  192,  192,
      192,  192,  698,  192,  697,  192,  192,  625,  192,  192,
      192,  192,  699,  627,  622,  192,  192, 1025,  621,  192,
      192,  192,  626, 1025,  624,  192,  192,  628,  192,  698,
      192,  192,  192,  192,  625,  192,  192,  630,  192,  699,
      627,  192,  192,  192,  629, 1025,  192,  631,  192,  626,

      192, 1025,  192,  192,  628,  700,  192,  701,  192,  192,
      192,  192,  192,  192,  630,  632,  192,  636,  192,  633,
      192,  629,  634, 1025,  631,  192,  192,  192,  637,  192,
      192,  638,  700,  192,  701,  635,  192,  192,  192,  192,
      639,  192,  632,  192,  636,  192,  633,  192,  192,  634,
      640,  192,  192,  192,  192,  637,  192,  641,  638,  192,
      192,  192,  635,  192,  192,  642,  192,  639,  192,  643,
      644,  702,  192, 1025,  192,  192,  192,  640,  192,  646,
      192,  192, 1025,  192,  641,  192,  192,  192,  192,  645,
      192,  647,  642, 1025,  703,  192,  643,  644,  702,  192,

      192,  192, 1025,  192,  192,  192,  646,  192,  192,  192,
      648,  649,  192,  192,  651,  192,  645,  192,  647,  192,
      650,  703,  192,  192,  192, 1025,  192,  192,  192,  192,
     1025,  192,  192,  192,  192,  192,  192,  648,  649,  652,
      192,  651,  192,  192,  192,  192,  192,  650,  655,  656,
      192,  192,  653,  657,  192,  192,  192,  654,  658, 1025,
      192,  192,  192,  192,  192,  192,  652,  704,  192,  192,
      192,  192,  192,  192,  660,  655,  656,  659,  192,  653,
      657,  192,  192,  192,  654,  658,  661,  192,  192,  192,
      192,  192,  192,  662,  704,  192,  192,  192,  192,  665,

      192,  660,  663,  192,  659,  192,  664,  192,  192,  192,
      192,  667,  192,  661,  192,  192,  705,  192,  666,  192,
      662,  192,  192,  192,  192,  192,  665,  192,  192,  663,
      192,  192,  192,  664,  192,  192,  669,  192,  667,  192,
      668,  192,  192,  705,  192,  666,  192,  192,  192,  192,
      192,  192,  670,  192,  192,  192,  706,  192,  192,  192,
      671,  192,  672,  669,  192,  675,  192,  668,  192,  192,
      192,  192, 1025,  192,  192,  674,  673, 1025,  192,  670,
      192,  192, 1025,  706,  192,  192,  192,  671,  192,  672,
      192,  707,  675,  192,  192,  676,  192,  192,  192,  192,

      192,  681,  674,  673,  677,  192,  680,  708,  192,  678,
      683,  679,  192,  192,  192,  192,  192,  192,  707,  192,
      192,  192,  676,  192,  192,  192,  192, 1025,  681,  682,
      709,  677,  192,  680,  708,  192,  678,  683,  679,  686,
      192,  192,  192,  192,  192,  192,  192,  192,  684, 1025,
      192,  192,  192,  685,  687,  192,  682,  709,  688,  710,
     1025,  711,  192,  712,  713,  192,  686,  192,  714,  715,
      192,  192,  192,  192,  192,  684,  689,  192,  716,  717,
      685,  687,  192,  718,  719,  688,  710,  690,  711,  720,
      712,  713,  192,  192,  192,  714,  715,  192,  721,  722,

      192,  192,  723,  689,  724,  716,  717,  725,  726,  728,
      718,  719,  729,  730,  690,  731,  720,  732,  733,  727,
      192,  192,  734,  735,  736,  721,  722,  737,  738,  723,
      739,  724,  740,  741,  725,  726,  728,  742,  743,  729,
      730,  744,  731,  745,  732,  733,  727,  746,  747,  734,
      735,  736,  748,  749,  737,  738,  750,  739,  751,  740,
      741,  752,  753,  754,  742,  743,  755,  756,  744,  757,
      745,  758,  759,  760,  746,  747,  761,  762,  763,  748,
      749,  192,  192,  750, 1025,  751,  192,  837,  752,  753,
      754,  769,  192,  755,  756,  764,  757,  192,  758,  759,

      760,  766,  192,  761,  762,  763,  767,  192,  192,  192,
      765,  192,  192,  192,  837,  192,  192,  192,  769,  192,
      768,  770,  764, 1025,  192,  192, 1025,  192,  766,  192,
      838,  192, 1025,  767,  192,  192,  192,  765,  192,  192,
      192,  192,  192,  192,  192,  192,  773,  768,  770,  771,
      192,  192,  192,  772,  192,  192, 1025,  838,  192,  192,
      192,  192,  192,  192,  774,  192,  775,  192,  192,  192,
      192, 1025,  192,  773,  839,  192,  771,  192,  192,  192,
      772,  776,  192,  192,  777,  192,  192,  192,  192,  192,
      778,  774,  192,  775,  192,  192,  192,  192,  779,  780,

      192,  839,  192,  192, 1025,  840,  192, 1025,  776,  192,
      192,  777,  192,  192,  192,  192,  192,  778,  841,  842,
      192,  192,  192,  192,  192,  779,  780,  192,  192,  192,
      192,  781,  840,  192,  782,  843,  192,  192, 1025,  783,
      192,  192,  192,  192,  192,  841,  842,  192,  192,  844,
      192,  192,  192,  784,  788,  192,  192,  192,  781,  786,
      192,  782,  843,  192,  192,  787,  783,  785,  192,  192,
      192,  192,  192,  845,  192,  192,  844,  192,  192,  192,
      784,  788,  192,  192,  192, 1025,  786,  790,  192,  192,
      192,  192,  787,  789,  785,  192,  192,  192,  192,  192,

      845,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  846,  790,  192,  192,  791,  192, 1025,
      789,  792,  794,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192, 1025, 1025,  192,  192,
      846,  793,  192,  192,  791,  192,  192,  192,  792,  794,
      192,  192, 1025,  192,  192,  192,  795, 1025,  192,  192,
      797, 1025,  192,  192,  796,  192,  192,  192,  793,  192,
      192,  847,  192,  192,  192,  798,  192, 1025,  192,  192,
      192,  192,  192,  795,  192,  848,  799,  797,  801,  192,
      192,  796,  192,  192,  192,  849,  192,  800,  847,  192,

      192,  192,  798,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  848,  799,  192,  801,  192, 1025,  804, 1025,
      802,  803,  849,  192,  800,  192,  192,  192,  192, 1025,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
     1025,  192,  807,  192,  192,  804,  808,  802,  803,  805,
      806, 1025,  192,  192,  810,  192,  809,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192, 1025,  807,
     1025,  192, 1025,  808,  192,  192,  805,  806,  192,  192,
      192,  810,  192,  809,  850,  192,  192,  192,  811,  192,
      192,  192,  812, 1025,  192,  192,  814,  813,  816,  192,

      192,  192,  192, 1025,  815,  192,  192, 1025,  192,  192,
      192,  850, 1025, 1025,  192,  811,  192,  192,  192,  812,
      192,  192,  192,  814,  813,  816,  192,  192,  192,  192,
      192,  815,  192,  818,  817,  192,  192,  192,  192,  820,
      819,  192,  821,  822,  192,  192, 1025,  192,  192,  192,
      192, 1025,  192,  824,  192,  192,  192,  192,  823,  192,
      818,  817,  192,  192,  192,  192,  820,  819,  192,  821,
      822,  192,  825,  192,  192,  192,  192,  192,  192,  192,
      824,  192,  192,  192,  192,  823,  827,  192,  192,  192,
      192,  192, 1025, 1025, 1025,  192,  828,  826,  192,  825,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  827,  192,  192,  830,  192,  833,  832,
      192,  831,  192,  828,  826,  192,  192, 1025,  829, 1025,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192, 1025,  830,  192,  833,  832,  192,  831,  192,
      192,  836,  834,  192,  192,  829,  192,  835,  851,  192,
      192,  192,  852,  192,  192,  192,  853,  192,  192,  192,
      192,  192,  854,  855,  192,  856,  192,  192,  836,  834,
      192,  192,  857,  192,  835,  851,  858,  192,  192,  852,
      859,  860,  861,  853,  862,  863,  192,  192,  192,  854,

      855,  192,  856,  864,  865,  866,  867,  192,  868,  857,
      869,  870,  871,  858,  872,  873,  874,  859,  860,  861,
      875,  862,  863,  876,  877,  878,  879,  880,  881,  882,
      864,  865,  866,  867,  883,  868,  884,  869,  870,  871,
      885,  872,  873,  874,  886,  887,  192,  875,  192,  192,
      876,  877,  878,  879,  880,  881,  882,  192,  889,  890,
      939,  883,  940,  884, 1025, 1025,  192,  885,  192,  192,
      888,  886,  887,  192, 1025,  192,  192,  192,  192,  192,
      891,  192,  192, 1025,  192,  889,  890,  939, 1025,  940,
      192,  892,  894,  192,  192,  192,  192,  888,  941, 1025,

      893,  192,  192,  192,  192,  192,  192,  891,  192,  192,
      192,  897,  192,  895,  192,  192,  192,  192,  892,  894,
     1025,  192,  896,  192,  192,  941,  900,  893,  192,  192,
      192,  192,  192,  899,  901,  192,  192,  192,  897,  192,
      895,  192,  192,  192,  192, 1025,  192,  898, 1025,  896,
      192,  192,  192,  900,  192,  192,  942,  192,  192,  192,
      899,  901,  192,  192,  943,  192,  192,  192,  192,  905,
      902,  192,  903,  192,  898,  192,  906,  192,  192,  192,
      904,  192,  192,  942,  192,  192,  192,  192,  192,  192,
     1025,  943,  192,  192,  192,  192,  905,  902,  192,  903,

      192,  192,  192,  906,  192,  192,  192,  904,  907,  192,
     1025,  192,  192,  192,  192,  192,  192,  192, 1025,  908,
      192,  192,  192, 1025,  909,  192,  192,  192,  192, 1025,
      192,  192, 1025,  192, 1025,  907,  192,  192,  192,  192,
      912,  192,  192,  944,  192,  910,  908,  192,  192,  192,
      192,  909, 1025,  192,  911,  913,  192,  192,  192,  192,
      192,  192,  945,  914,  192,  192,  192,  912,  192,  192,
      944,  192,  910,  192,  192,  915,  192,  192, 1025,  192,
      916,  911,  913,  192,  192,  192,  192,  192,  192,  945,
      914,  192,  192,  192,  192,  192,  192, 1025,  192,  192,

      192,  192,  915,  192,  192,  192,  192,  916,  917,  192,
      192,  192,  192,  919,  192, 1025,  192, 1025,  192,  922,
      192,  192,  192,  192,  918,  192,  192,  920, 1025,  192,
      192,  192,  192,  192,  192,  917,  192,  192,  192,  192,
      919,  192,  192,  192,  192, 1025,  922, 1025,  923,  924,
     1025,  918,  192,  192,  920,  921,  192,  192,  192,  192,
      192,  192,  192, 1025,  192,  192,  192,  925,  192,  192,
      192,  192,  192,  192,  926,  923,  924,  927,  192,  192,
      192, 1025,  921,  928,  929,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  925,  192,  192,  192,  192,  192,

      192,  926,  946,  947,  927,  192,  192,  192,  931,  930,
      928,  929,  933,  192,  192,  192,  192,  192,  932,  192,
      192,  935,  192,  192,  192,  192,  934,  192, 1025,  946,
      947, 1025,  192,  937,  192,  931,  930,  192,  192,  933,
      192,  192,  192,  192,  192,  932,  938,  192,  935,  192,
      192,  192,  936,  934,  192,  192,  948,  192,  192,  192,
      937,  949,  950,  951,  192,  192,  952,  953,  192,  192,
      192,  192,  954,  938,  192,  192,  955,  192,  956,  936,
      957,  958,  192,  948,  192,  192,  959,  960,  949,  950,
      951,  961,  962,  952,  953,  963,  964,  192,  965,  954,

      966,  192,  192,  955,  968,  956,  192,  957,  958, 1025,
     1025, 1025, 1025,  959,  960,  967,  192,  192,  961,  962,
      192,  192,  963,  964,  192,  965,  192,  966,  192, 1025,
      969,  968,  192,  192,  192,  192,  192,  192,  971,  970,
      192, 1025,  967,  192,  192, 1025, 1025,  192,  192,  972,
      192,  192,  192,  192,  192,  192,  973,  969,  192,  192,
      192,  192,  192,  192,  192,  971,  970,  192,  192,  192,
      192,  192,  974,  192, 1025, 1025,  972,  192,  192,  192,
     1025,  192,  192,  973,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  974,

      192,  976,  192,  975,  192,  192,  192,  192, 1025, 1025,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  977,  192,  979,  192,  192,  192,  976,  192,
      975,  192,  192,  192,  192,  192,  978,  192,  192,  192,
     1025,  192,  980,  192,  192,  192,  192,  983,  192,  977,
      192,  979,  192,  192,  192,  192,  981,  192,  192,  192,
      192,  192,  192,  978,  985,  192,  192,  192,  984,  980,
      192,  192,  192,  192,  983,  192,  982,  192,  192,  192,
      192,  192,  192,  981,  192,  192,  192,  192,  192,  192,
      192,  985,  986,  192,  192,  984, 1025,  988,  192,  192,

      192,  192, 1025,  982,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  987,  986,
      192,  192,  993,  192,  988,  192,  192,  192,  192,  989,
      990,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      994,  192,  192,  192,  192,  987, 1025,  192,  192,  993,
      192,  995,  192,  192,  996,  997,  989,  990,  192,  192,
      192,  192,  192,  998,  192,  991,  192,  994,  999, 1000,
      192,  192,  192,  992, 1001, 1025, 1025,  192,  995,  192,
      192,  996,  997,  192, 1025,  192,  192,  192,  192,  192,
      998,  192,  991,  192, 1002,  999, 1000,  192,  192,  192,

      992, 1001,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192, 1003,  192,  192,
      192, 1002,  192,  192,  192,  192,  192, 1025,  192,  192,
      192,  192,  192,  192,  192,  192,  192, 1025,  192,  192,
      192, 1006,  192,  192, 1003,  192,  192,  192,  192,  192,
      192,  192, 1004,  192,  192,  192,  192,  192,  192, 1025,
      192,  192,  192, 1025, 1005,  192,  192,  192, 1006,  192,
      192,  192, 1007,  192,  192,  192,  192,  192,  192, 1004,
      192,  192,  192,  192,  192,  192, 1008,  192,  192,  192,
     1009, 1005,  192,  192, 1010,  192,  192, 1011,  192, 1007,

      192,  192,  192,  192,  192, 1012, 1013,  192, 1014,  192,
     1015,  192,  192, 1008,  192,  192,  192, 1009, 1025,  192,
      192, 1010,  192,  192, 1011,  192, 1016,  192,  192,  192,
      192,  192, 1012, 1013, 1021, 1014,  192, 1015,  192,  192,
     1017,  192,  192,  192, 1025,  192,  192,  192,  192, 1018,
     1019,  192,  192, 1016,  192,  192,  192,  192,  192,  192,
     1022, 1021, 1020,  192, 1023,  192,  192, 1017,  192, 1025,
      192,  192,  192,  192,  192,  192, 1018, 1019,  192,  192,
     1025,  192, 1024,  192,  192,  192,  192, 1022,  192, 1020,
      192, 1023,  192,  192,  192,  192, 1025,  192,  192, 1025,

      192,  192, 1025, 1025, 1025, 1025,  192, 1025,  192, 1024,
     1025,  192,  192, 1025,  192,  192, 1025,  192, 1025, 1025,
      192,  192, 1025, 1025, 1025, 1025, 1025, 1025,  192, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025,  192,   46,   46,   46,   46,   46,   88, 1025, 1025,
       88,   88,  178,  178,  178, 1025,  178,  180, 1025,  180,
      180,  180,  183, 1025,  183,  183,  183,  192, 1025,  192,
      192,  192,    7, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025
    } ;

static yyconst flex_int16_t yy_chk[4142] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    9,    9,   10,   10,
       15, 1028,   15,   17,   17,   18,   18,   22,   23,   22,
       25,  383,   24,   31,   25,   22,  274,   22,   25,   24,
       32,   22,   22,   44,   25,   98,   24,   25,   23,   24,
       24,   26,  187,   26,   22,   23,   22,   25,   26,   24,
       31,   25,   22,   26,   22,   25,   24,   32,   22,   22,
       44,   25,   98,   24,   25,   23,   24,   24,   26,   29,

       26,  186,   28,   49,   49,   26,   42,   29,   28,  183,
       26,   27,   99,   29,   42,   50,   50,   57,   57,   27,
       33,   55,   27,   55,   33,   27,   29,  102,   27,   28,
       33,   27,   34,   42,   29,   28,   34,   30,   27,   99,
       29,   42,   34,   30,   30,   30,   27,   33,   92,   27,
       30,   33,   27,   35,  102,   27,   91,   33,   27,   34,
       58,   58,   38,   34,   30,   37,   38,   35,   88,   34,
       30,   30,   30,   35,   35,   36,   37,   30,   85,   41,
       35,   41,   37,   36,   41,   72,   39,   36,   39,   38,
       36,   39,   37,   38,   35,   43,   43,   60,   39,   39,

       35,   35,   36,   37,   59,   72,   41,   56,   41,   37,
       36,   41,   72,   39,   36,   39,   69,   36,   39,   71,
       69,   52,   43,   43,   69,   39,   39,   40,   40,   71,
       69,   40,   72,  103,   40,   40,   86,   86,  107,   71,
       69,   40,  110,   69,   40,   51,   71,   69,   90,   90,
       47,   69,  181,  181,   40,   40,   71,   69,   40,   45,
      103,   40,   40,  185,  185,  107,   71,   69,   40,  110,
       20,   40,   61,   61,   68,   61,   61,   61,   61,   61,
       61,   68,   61,   61,   61,   73,   74,   68,  109,   73,
       74,  100,  113,  113,   68,   73,   74,  106,  109,  100,

       19,   68,   16,  114,  106,   73,   74,   78,   68,   84,
      115,   78,   73,   74,   68,  109,   73,   74,  100,  113,
      113,   68,   73,   74,  106,  109,  100,   78,  104,   84,
      114,  106,   73,   74,   78,   11,   84,  115,   78,   61,
       62,   62,  104,   62,   62,   62,   62,   62,   62,   77,
       62,   62,   62,   77,   78,  104,   84,   62,   83,   62,
       77,   83,   83,  116,  117,   62,   77,   62,  108,  104,
      108,   62,   62,   77,  101,  118,   77,  101,   83,  120,
       77,    7,    4,  121,   62,   83,   62,   77,   83,   83,
      116,  117,   62,   77,   62,  108,    3,  108,   62,   62,

       77,  101,  118,    0,  101,   83,  120,   62,   63,   63,
      121,   63,   63,   63,   63,   63,   63,  111,   63,   63,
       63,   81,  111,   82,  122,    0,   63,   82,  123,  124,
       81,   82,   81,  125,  112,   81,  126,  127,  130,  112,
      128,   81,  132,  128,  111,  112,   63,   82,   81,  111,
       82,  122,  112,   63,   82,  123,  124,   81,   82,   81,
      125,  112,   81,  126,  127,  130,  112,  128,   81,  132,
      128,  133,  112,   63,   82,   63,   64,  135,  136,  112,
       64,  129,  119,   64,  119,  137,  129,    0,  119,  138,
       64,  141,  142,   64,   64,  119,  143,    0,  133,  119,

       64,    0,    0,   64,  135,  136,    0,   64,  129,  119,
       64,  119,  137,  129,  134,  119,  138,   64,  141,  142,
       64,   64,  119,  143,  134,    0,  119,   64,   65,  134,
      134,  139,   65,  139,  144,  140,   65,  140,  145,  146,
      147,  134,   65,  148,  150,   65,  151,  152,  140,  153,
      154,  134,   65,    0,  154,   65,  134,  134,  139,   65,
      139,  144,  140,   65,  140,  145,  146,  147,  156,   65,
      148,  150,   65,  151,  152,  140,  153,  154,  155,   65,
       66,  154,  157,  155,    0,  159,  160,   66,  161,   66,
      162,  163,    0,  164,   66,  156,  165,  166,  167,   66,

       66,    0,  158,  168,  164,  155,  170,   66,  171,  157,
      155,  158,  159,  160,   66,  161,   66,  162,  163,  158,
      164,   66,  174,  165,  166,  167,   66,   66,   67,  158,
      168,  164,   67,  170,  169,  171,   67,  169,  158,   67,
      175,  172,   67,  173,  176,   67,  158,  172,   67,  174,
        0,    0,   67,    0,    0,   67,  173,  192,    0,   67,
        0,  169,    0,   67,  169,  276,   67,  175,  172,   67,
      173,  176,   67,    0,  172,   67,  194,  192,  200,   67,
       70,   70,  197,  173,  192,  193,  193,   70,   70,   70,
      278,  194,  276,    0,   70,  197,  194,  279,  200,    0,

       70,    0,  197,  194,  192,  200,  193,   70,   70,  197,
      204,    0,  193,  193,   70,   70,   70,  278,  194,  195,
      204,   70,  197,  194,  279,  200,  195,   70,   75,  197,
      204,    0,   75,  193,  195,  281,  198,  204,  198,  195,
      196,  283,   75,  196,  196,  284,  195,  204,   75,   75,
        0,    0,   75,  195,    0,   75,  285,  204,  198,   75,
      287,  195,  281,  198,  196,  198,  195,  196,  283,   75,
      196,  196,  284,    0,  210,   75,   75,  199,  199,   75,
       76,   76,    0,  285,  210,  198,  202,  287,    0,   76,
      202,  196,  199,   76,  210,  201,   76,  199,    0,    0,

       76,  210,  201,    0,  199,  199,    0,   76,   76,  201,
      202,  210,  288,  202,    0,  201,   76,  202,    0,  199,
       76,  210,  201,   76,  199,  203,  205,   76,   79,  201,
       79,  289,  203,   79,  203,    0,  201,  202,  290,  288,
       79,   79,  201,  205,  291,  203,  205,    0,  293,  206,
       79,    0,  203,  205,  295,   79,    0,   79,  289,  203,
       79,  203,  212,  212,  206,  290,  296,   79,   79,  206,
      205,  291,  203,  205,  208,  293,  206,   79,   80,   80,
      298,  295,   80,  212,  209,   80,   80,  208,  208,  212,
      212,  206,   80,  296,  208,   80,  206,    0,  299,    0,

      209,  208,   80,    0,  209,   80,   80,  298,    0,   80,
      212,  209,   80,   80,  208,  208,  215,  226,  211,   80,
        0,  208,   80,  215,  213,  299,  213,  209,  300,   80,
      207,  209,  211,    0,  207,  207,  215,  226,  211,    0,
      216,  207,    0,  215,  226,  211,  213,  216,  207,    0,
      215,  213,    0,  213,  207,  300,  217,  207,  218,  211,
      216,  207,  207,  215,  226,  211,  217,  216,  207,  219,
        0,  218,    0,  213,  216,  207,  217,    0,  218,  219,
      301,  207,  214,  217,  214,  218,    0,  216,  214,  219,
      220,    0,  221,  217,    0,  214,  219,  220,  218,  214,

        0,    0,  221,  217,  214,  218,  219,  301,  222,  214,
      220,  214,  221,  223,    0,  214,  219,  220,  222,  221,
        0,  286,  214,  286,  220,    0,  214,  223,  222,  221,
      223,  214,  224,  223,    0,  222,    0,  220,    0,  221,
      223,  224,  225,  227,  230,  222,  224,  227,  286,    0,
      286,  302,  224,  230,  223,  222,  228,  223,  225,  224,
      223,  231,  225,  227,  230,  231,  232,  228,  224,  225,
      227,  230,    0,  224,  227,  303,  228,    0,  302,  224,
      230,  231,    0,  228,  297,  225,  232,    0,  231,  225,
      227,  230,  231,  232,  228,  233,  233,  236,    0,  297,

        0,  234,  303,  228,  229,  229,  305,  234,  231,  234,
      236,  297,    0,  232,  229,  233,    0,  236,  237,  229,
      229,  234,  233,  233,  236,  229,  297,  237,  234,  306,
      238,  229,  229,  305,  234,    0,  234,  236,  237,  238,
      239,  229,  233,  240,  236,  237,  229,  229,  234,  235,
      238,  235,  229,  235,  237,  239,  306,  238,  240,  307,
      239,  241,  235,  240,    0,  237,  238,  239,  241,  308,
      240,  244,    0,  235,    0,  242,  235,  238,  235,  242,
      235,  241,  239,  243,  243,  240,  307,  239,  241,  235,
      240,  244,  245,  245,  246,  241,  308,    0,  244,  242,

      235,  248,  242,  243,  247,  248,  242,  309,  241,  246,
      243,  243,  310,  245,  246,    0,    0,  247,  244,  245,
      245,  246,  311,  249,  247,  248,  242,  249,  248,    0,
      243,  247,  248,  250,  309,  251,  246,  251,    0,  310,
      245,  246,  250,  249,  247,  252,  254,  250,  252,  311,
      249,  247,  248,  250,  249,  251,  254,    0,  255,  253,
      250,  253,  251,  256,  251,  252,  254,  256,  253,  250,
      249,  255,  252,  254,  250,  252,  253,  258,  255,  312,
      250,  253,  251,  254,  258,  255,  253,  256,  253,    0,
      256,  313,  252,  254,  256,  253,  257,  258,  255,  257,

        0,  259,  260,  253,  258,  255,  312,  261,  253,  259,
        0,  258,  266,  315,  256,  261,  266,  263,  313,  257,
      259,  259,  260,  257,  258,    0,  257,  261,  259,  260,
      262,  264,  266,  263,  261,  264,  259,  263,  264,  266,
      315,  262,  261,  266,  263,  316,  257,  259,  259,  260,
      262,  264,  265,  265,  261,  269,  267,  262,  264,  266,
      263,  268,  264,  267,  263,  264,  317,  318,  262,  267,
      319,  270,  316,  265,  268,  269,  267,  262,  264,  265,
      265,  268,  269,  267,  320,  271,  270,  321,  268,  271,
      267,  270,  322,  317,  318,  323,  267,  319,  270,  324,

      265,  268,  269,  267,  325,  326,  327,  328,  268,  271,
      329,  320,  271,  270,  321,  330,  271,  331,  270,  322,
      329,  333,  323,  334,  335,  336,  324,  337,  338,  339,
      340,  325,  326,  327,  328,  341,  271,  329,  342,  344,
      345,  346,  330,  347,  331,  348,  349,  329,  333,  350,
      334,  335,  336,  351,  337,  338,  339,  340,  352,  353,
      354,  355,  341,  356,  357,  342,  344,  345,  346,  358,
      347,  360,  348,  349,  361,  362,  350,  363,  365,  366,
      351,  367,  368,  370,  372,  352,  353,  354,  355,  373,
      356,  357,  370,  371,  374,  371,  358,  375,  360,  376,

      377,  361,  362,  378,  363,  365,  366,  380,  367,  368,
      370,  372,  381,  379,  491,  384,  373,  379,  385,  370,
      371,  374,  371,  386,  375,    0,  376,  377,  387,  388,
      378,  389,  391,  390,  380,  384,  388,  390,  385,  381,
      379,  491,  384,  386,  379,  385,  394,  492,  387,  388,
      386,  389,  391,  394,    0,  387,  388,  390,  389,  391,
      390,  392,  384,  388,  390,  385,  394,  393,    0,    0,
      386,  392,    0,  394,  492,  387,  388,  396,  389,  391,
      394,  392,    0,  397,  390,  393,  398,  393,  392,  395,
      396,  395,    0,  394,  393,  400,  399,  396,  392,  397,

      399,  398,  493,  397,  396,  401,  398,    0,  392,  400,
      397,  395,  393,  398,  393,  400,  395,  396,  395,  402,
      399,  403,  400,  399,  396,  401,  397,  399,  398,  493,
      397,  405,  401,  398,  406,  405,  400,  404,  395,  402,
      408,  403,  400,  407,  404,  407,  402,  399,  403,  406,
      410,    0,  401,  410,  406,  405,    0,  404,  405,  409,
      408,  406,  405,  412,  404,  407,  402,  408,  403,  494,
      407,  404,  407,  410,  409,  413,  406,  410,  411,  409,
      410,  406,  405,  412,  404,    0,  409,  408,  415,  411,
      412,    0,  407,  414,  495,  413,  494,  414,  411,  417,

      410,  409,  413,  496,    0,  411,  409,  416,  415,  416,
      412,  418,  421,  417,    0,  415,  411,  414,  418,  417,
      414,  495,  413,  420,  414,  411,  417,  498,  419,  416,
      496,  418,  421,  423,  416,  415,  416,  420,  418,  421,
      417,  419,    0,  420,  414,  418,  417,  422,  419,  424,
      420,  422,  501,  423,  498,  419,  416,  424,  418,  421,
      423,  427,  502,  426,  420,  425,  426,    0,  419,  424,
      420,  422,  425,    0,  422,  419,  424,  427,  422,  501,
      423,  427,  430,  429,  424,  425,  426,  429,  427,  502,
      426,  428,  425,  426,  428,    0,  424,  430,  422,  425,

      431,    0,  430,  429,  427,  503,  432,  504,  427,  430,
      429,  428,  425,  426,  429,  431,  433,  435,  428,  432,
      431,  428,  433,    0,  430,  434,  432,  431,  436,  430,
      429,  437,  503,  432,  504,  434,  433,  435,  428,  441,
      438,  439,  431,  433,  435,  434,  432,  431,  436,  433,
      438,  437,  434,  432,  442,  436,  440,  439,  437,  441,
      438,  439,  434,  433,  435,  440,  441,  438,  439,  442,
      443,  506,  434,    0,  442,  436,  440,  438,  437,  445,
      445,  442,    0,  440,  439,  444,  441,  438,  439,  444,
      443,  446,  440,    0,  507,  446,  442,  443,  506,  450,

      445,  442,    0,  440,  449,  444,  445,  445,  447,  448,
      447,  448,  444,  452,  450,  446,  444,  443,  446,  450,
      449,  507,  446,  451,  449,    0,  450,  445,  447,  448,
        0,  449,  444,  452,  455,  447,  448,  447,  448,  451,
      452,  450,  446,  451,  454,  453,  450,  449,  455,  456,
      451,  449,  453,  457,  455,  447,  448,  454,  458,    0,
      452,  455,  458,  460,  454,  453,  451,  508,  459,  456,
      451,  454,  453,  457,  460,  455,  456,  459,  461,  453,
      457,  455,  458,  460,  454,  458,  461,  463,  459,  458,
      460,  454,  453,  462,  508,  459,  456,  462,  461,  465,

      457,  460,  463,  464,  459,  461,  464,  463,  466,  458,
      460,  467,  468,  461,  463,  459,  509,  462,  466,  465,
      462,  470,  469,  464,  462,  461,  465,  473,  466,  463,
      464,  467,  468,  464,  463,  466,  470,  471,  467,  468,
      469,  470,  469,  509,  462,  466,  465,  473,  470,  469,
      464,  474,  471,  472,  473,  466,  511,  471,  467,  468,
      472,  475,  474,  470,  471,  477,  476,  469,  470,  469,
      478,  474,    0,  472,  473,  476,  475,    0,  474,  471,
      472,  475,    0,  511,  471,  477,  476,  472,  475,  474,
      478,  512,  477,  476,  484,  479,  481,  478,  474,  480,

      472,  482,  476,  475,  479,  482,  481,  513,  475,  480,
      484,  480,  477,  476,  484,  479,  481,  478,  512,  480,
      483,  484,  479,  481,  487,  482,  480,    0,  482,  483,
      516,  479,  482,  481,  513,  486,  480,  484,  480,  487,
      483,  484,  479,  481,  487,  488,  480,  483,  485,    0,
      485,  487,  482,  486,  488,  486,  483,  516,  488,  517,
        0,  518,  486,  519,  520,  488,  487,  483,  521,  522,
      485,  487,  488,  489,  490,  485,  489,  485,  524,  527,
      486,  488,  486,  528,  530,  488,  517,  490,  518,  532,
      519,  520,  488,  489,  490,  521,  522,  485,  534,  535,

      489,  490,  536,  489,  537,  524,  527,  538,  539,  541,
      528,  530,  545,  547,  490,  549,  532,  550,  550,  539,
      489,  490,  551,  552,  554,  534,  535,  555,  556,  536,
      557,  537,  558,  560,  538,  539,  541,  561,  562,  545,
      547,  563,  549,  564,  550,  550,  539,  565,  566,  551,
      552,  554,  567,  569,  555,  556,  570,  557,  571,  558,
      560,  572,  575,  577,  561,  562,  578,  579,  563,  580,
      564,  581,  582,  583,  565,  566,  584,  586,  588,  567,
      569,  593,  591,  570,    0,  571,  594,  693,  572,  575,
      577,  596,  597,  578,  579,  591,  580,  592,  581,  582,

      583,  593,  591,  584,  586,  588,  594,  595,  593,  591,
      592,  596,  597,  594,  693,  599,  600,  592,  596,  597,
      595,  598,  591,    0,  592,  598,    0,  595,  593,  591,
      695,  603,    0,  594,  595,  599,  600,  592,  596,  597,
      602,  601,  599,  600,  592,  598,  603,  595,  598,  601,
      604,  603,  598,  602,  595,  605,    0,  695,  603,  606,
      602,  601,  599,  600,  604,  607,  606,  602,  601,  608,
      604,    0,  598,  603,  696,  605,  601,  604,  603,  606,
      602,  607,  605,  610,  608,  607,  606,  602,  601,  608,
      609,  604,  607,  606,  609,  612,  608,  604,  611,  612,

      611,  696,  605,  610,    0,  697,  606,    0,  607,  614,
      610,  608,  607,  615,  609,  612,  608,  609,  698,  699,
      611,  609,  612,  616,  613,  611,  612,  611,  617,  614,
      610,  613,  697,  615,  616,  700,  614,  618,    0,  617,
      615,  609,  612,  616,  613,  698,  699,  611,  617,  702,
      616,  613,  619,  618,  622,  617,  614,  618,  613,  620,
      615,  616,  700,  620,  618,  621,  617,  619,  623,  621,
      616,  613,  619,  703,  622,  617,  702,  625,  624,  619,
      618,  622,  626,  620,  618,    0,  620,  627,  623,  621,
      620,  627,  621,  624,  619,  623,  621,  625,  624,  619,

      703,  622,  626,  629,  625,  624,  628,  631,  633,  626,
      620,  627,  630,  704,  627,  623,  621,  628,  627,    0,
      624,  630,  634,  629,  625,  624,  628,  631,  633,  626,
      629,  632,  630,  628,  631,  633,    0,    0,  627,  630,
      704,  632,  634,  635,  628,  636,  640,  637,  630,  634,
      629,  632,    0,  628,  631,  633,  635,    0,  632,  630,
      637,    0,  638,  635,  636,  636,  640,  637,  632,  634,
      635,  706,  636,  640,  637,  638,  642,    0,  632,  643,
      644,  641,  638,  635,  639,  707,  639,  637,  641,  638,
      635,  636,  636,  640,  637,  708,  642,  639,  706,  643,

      644,  641,  638,  642,  639,  645,  643,  644,  641,  638,
      646,  639,  707,  639,  647,  641,  648,    0,  649,    0,
      645,  647,  708,  642,  639,  645,  643,  644,  641,    0,
      646,  639,  645,  652,  647,  650,  648,  646,  649,  651,
        0,  647,  651,  648,  653,  649,  652,  645,  647,  650,
      650,    0,  645,  652,  655,  650,  654,  646,  654,  651,
      652,  647,  650,  648,  653,  649,  651,  659,    0,  651,
        0,  653,    0,  652,  655,  656,  650,  650,  654,  657,
      652,  655,  650,  654,  709,  654,  651,  659,  656,  658,
      662,  653,  657,    0,  659,  656,  660,  658,  662,  657,

      660,  655,  656,    0,  661,  654,  657,    0,  661,  658,
      662,  709,    0,    0,  659,  656,  658,  662,  664,  657,
      660,  663,  656,  660,  658,  662,  657,  660,  661,  668,
      666,  661,  665,  664,  663,  661,  658,  662,  664,  666,
      665,  663,  667,  669,  667,  664,    0,  660,  663,  668,
      666,    0,  665,  671,  670,  661,  668,  666,  670,  665,
      664,  663,  672,  669,  667,  664,  666,  665,  663,  667,
      669,  667,  672,  671,  670,  673,  668,  666,  674,  665,
      671,  670,  672,  675,  676,  670,  677,  678,  677,  672,
      669,  667,    0,    0,    0,  673,  678,  675,  674,  672,

      671,  670,  673,  675,  676,  674,  681,  678,  677,  672,
      675,  676,  679,  677,  678,  677,  680,  682,  683,  682,
      680,  681,  673,  678,  675,  674,  681,    0,  679,    0,
      675,  676,  679,  681,  678,  677,  685,  682,  683,  679,
      680,  686,    0,  680,  682,  683,  682,  680,  681,  684,
      687,  688,  684,  681,  689,  679,  685,  686,  710,  679,
      690,  686,  711,  685,  682,  683,  712,  680,  686,  684,
      687,  688,  713,  714,  689,  717,  684,  687,  688,  684,
      690,  689,  719,  685,  686,  710,  720,  690,  686,  711,
      722,  725,  726,  712,  727,  728,  684,  687,  688,  713,

      714,  689,  717,  733,  735,  736,  737,  690,  740,  719,
      741,  742,  743,  720,  744,  746,  747,  722,  725,  726,
      748,  727,  728,  749,  750,  751,  752,  753,  754,  756,
      733,  735,  736,  737,  757,  740,  758,  741,  742,  743,
      760,  744,  746,  747,  761,  762,  764,  748,  765,  766,
      749,  750,  751,  752,  753,  754,  756,  767,  768,  769,
      837,  757,  839,  758,    0,    0,  764,  760,  765,  766,
      766,  761,  762,  764,    0,  765,  766,  767,  768,  769,
      770,  770,  771,    0,  767,  768,  769,  837,    0,  839,
      772,  771,  773,  764,  774,  765,  766,  766,  840,    0,

      772,  770,  771,  775,  767,  768,  769,  770,  770,  771,
      772,  777,  773,  775,  774,  776,  778,  772,  771,  773,
        0,  774,  776,  775,  780,  840,  781,  772,  770,  771,
      775,  777,  779,  780,  782,  776,  778,  772,  777,  773,
      775,  774,  776,  778,  780,    0,  781,  779,    0,  776,
      775,  780,  779,  781,  782,  783,  841,  784,  777,  779,
      780,  782,  776,  778,  842,  786,  785,  788,  789,  786,
      783,  780,  784,  781,  779,  783,  787,  784,  787,  779,
      785,  782,  783,  841,  784,  786,  785,  788,  789,  791,
        0,  842,  786,  785,  788,  789,  786,  783,  787,  784,

      794,  790,  783,  787,  784,  787,  796,  785,  790,  791,
        0,  793,  786,  785,  788,  789,  791,  792,    0,  792,
      794,  790,  797,    0,  793,  787,  796,  794,  790,    0,
      795,  793,    0,  796,    0,  790,  791,  792,  793,  798,
      799,  800,  797,  844,  792,  795,  792,  794,  790,  797,
      795,  793,    0,  796,  798,  800,  801,  795,  793,  798,
      799,  800,  845,  801,  792,  802,  798,  799,  800,  797,
      844,  803,  795,  804,  805,  806,  801,  795,    0,  807,
      808,  798,  800,  801,  808,  802,  798,  799,  800,  845,
      801,  803,  802,  804,  805,  806,  811,    0,  803,  807,

      804,  805,  806,  801,  808,  809,  807,  808,  809,  810,
      812,  808,  802,  813,  814,    0,  811,    0,  803,  816,
      804,  805,  806,  811,  810,  809,  807,  814,    0,  810,
      812,  808,  809,  813,  814,  809,  810,  812,  818,  816,
      813,  814,  815,  811,  817,    0,  816,    0,  817,  819,
        0,  810,  809,  819,  814,  815,  810,  812,  818,  821,
      813,  814,  815,    0,  817,  818,  816,  820,  820,  815,
      824,  817,  828,  819,  821,  817,  819,  822,  822,  821,
      819,    0,  815,  823,  824,  818,  821,  823,  820,  815,
      824,  817,  828,  826,  820,  820,  825,  824,  822,  828,

      819,  821,  848,  852,  822,  822,  821,  823,  826,  825,
      823,  824,  829,  826,  823,  820,  825,  824,  827,  828,
      826,  831,  827,  825,  832,  822,  830,  830,    0,  848,
      852,    0,  829,  834,  823,  826,  825,  834,  833,  829,
      826,  831,  827,  825,  832,  827,  835,  830,  831,  827,
      835,  832,  833,  830,  830,  836,  854,  834,  833,  829,
      834,  855,  858,  861,  834,  833,  862,  865,  831,  827,
      835,  832,  866,  835,  830,  836,  868,  835,  869,  833,
      870,  872,  836,  854,  834,  833,  873,  877,  855,  858,
      861,  879,  880,  862,  865,  881,  886,  835,  887,  866,

      888,  889,  836,  868,  891,  869,  890,  870,  872,    0,
        0,    0,    0,  873,  877,  890,  892,  894,  879,  880,
      888,  889,  881,  886,  891,  887,  890,  888,  889,    0,
      892,  891,  893,  890,  896,  897,  892,  894,  895,  893,
      895,    0,  890,  892,  894,    0,    0,  888,  889,  896,
      898,  891,  893,  890,  896,  897,  899,  892,  899,  893,
      895,  896,  897,  892,  894,  895,  893,  895,  900,  901,
      898,  902,  903,  904,    0,    0,  896,  898,  899,  893,
        0,  896,  897,  899,  907,  899,  906,  895,  900,  901,
      908,  902,  903,  904,  905,  900,  901,  898,  902,  903,

      904,  906,  909,  905,  907,  899,  906,  910,    0,    0,
      908,  907,  911,  906,  905,  900,  901,  908,  902,  903,
      904,  905,  909,  912,  913,  914,  915,  910,  906,  909,
      905,  907,  911,  906,  910,  916,  912,  908,  918,  911,
        0,  905,  916,  912,  913,  914,  915,  920,  921,  909,
      912,  913,  914,  915,  910,  916,  917,  922,  918,  911,
      917,  919,  916,  912,  923,  918,  923,  920,  921,  916,
      912,  913,  914,  915,  920,  921,  919,  922,  924,  925,
      917,  919,  916,  917,  922,  918,  923,  917,  919,  926,
      927,  923,  924,  923,  920,  921,    0,  930,  924,  925,

      929,  930,    0,  919,  922,  924,  925,  917,  919,  926,
      927,  928,  933,  923,  934,  932,  926,  927,  928,  924,
      929,  930,  944,  935,  930,  924,  925,  929,  930,  931,
      932,  928,  933,  931,  934,  932,  926,  927,  928,  933,
      946,  934,  932,  935,  936,  928,    0,  929,  930,  944,
      935,  952,  937,  931,  954,  955,  931,  932,  928,  933,
      931,  934,  932,  958,  936,  937,  938,  946,  961,  962,
      935,  936,  937,  938,  963,    0,    0,  966,  952,  937,
      931,  954,  955,  967,    0,  968,  938,  969,  970,  972,
      958,  936,  937,  938,  971,  961,  962,  966,  971,  937,

      938,  963,  973,  967,  966,  968,  974,  969,  970,  972,
      967,  975,  968,  938,  969,  970,  972,  973,  971,  976,
      977,  971,  973,  978,  966,  971,  974,    0,  980,  973,
      967,  975,  968,  974,  969,  970,  972,    0,  975,  976,
      977,  982,  983,  978,  973,  971,  976,  977,  980,  973,
      978,  981,  979,  974,  979,  980,  984,  985,  975,    0,
      986,  982,  983,    0,  981,  987,  976,  977,  982,  983,
      978,  981,  985,  988,  979,  980,  984,  985,  981,  979,
      986,  979,  989,  984,  985,  987,  988,  986,  982,  983,
      989,  981,  987,  988,  990,  991,  992,  993,  981,  985,

      988,  979,  989,  984,  985,  995,  997,  986,  999,  989,
     1000, 1002,  987,  988,  990,  991,  992,  989,    0, 1003,
      988,  990,  991,  992,  993, 1004, 1002, 1005, 1007,  989,
     1008, 1002,  995,  997, 1011,  999, 1006, 1000, 1002, 1003,
     1004,  990,  991,  992,    0, 1004, 1003, 1005, 1007, 1006,
     1008, 1009, 1004, 1002, 1005, 1007, 1006, 1008, 1002, 1010,
     1013, 1011, 1009, 1006, 1016, 1017, 1003, 1004, 1018,    0,
     1019, 1009, 1004, 1020, 1005, 1007, 1006, 1008, 1009, 1010,
        0, 1023, 1018, 1006, 1016, 1017, 1010, 1013, 1018, 1009,
     1019, 1016, 1017, 1020, 1024, 1018,    0, 1019, 1009,    0,

     1020, 1023,    0,    0,    0,    0, 1010,    0, 1023, 1018,
        0, 1016, 1017,    0, 1024, 1018,    0, 1019,    0,    0,
     1020, 1024,    0,    0,    0,    0,    0,    0, 1023,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1024, 1026, 1026, 1026, 1026, 1026, 1027,    0,    0,
     1027, 1027, 1029, 1029, 1029,    0, 1029, 1030,    0, 1030,
     1030, 1030, 1031,    0, 1031, 1031, 1031, 1032,    0, 1032,
     1032, 1032, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,

     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../../include/sqlparser/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweaks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1731 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2019 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1026 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1025 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 135:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 142:
#line 206 "flex_lexer.l"
case 143:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 222 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 149:
/* rule 149 can match eol */
YY_RULE_SETUP
#line 229 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 231 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 233 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 2850 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1026 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1026 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1025);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 236 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

