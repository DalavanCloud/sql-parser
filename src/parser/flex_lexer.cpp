#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE hsql_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via hsql_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void hsql_restart (FILE *input_file ,yyscan_t yyscanner );
void hsql__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void hsql__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void hsql_pop_buffer_state (yyscan_t yyscanner );

static void hsql_ensure_buffer_stack (yyscan_t yyscanner );
static void hsql__load_buffer_state (yyscan_t yyscanner );
static void hsql__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER hsql__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE hsql__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE hsql__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *hsql_alloc (yy_size_t ,yyscan_t yyscanner );
void *hsql_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void hsql_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer hsql__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        hsql_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 161
#define YY_END_OF_BUFFER 162
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1124] =
    {   0,
        0,    0,  158,  158,    2,    2,  162,  160,    4,    4,
      160,  160,  149,  156,  149,  149,  152,  149,  149,  149,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  160,  149,  158,  159,    2,
        2,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    4,
      144,    0,    1,  152,  151,  150,  146,  145,  143,  147,

      155,  155,  155,  155,  155,  155,  126,  155,  127,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  128,  155,  155,  155,  129,  130,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  131,  132,  133,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  134,  155,  155,  155,  155,  155,  155,  155,
      155,  155,    0,  148,  158,  157,    2,    2,    2,    2,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  153,  150,  112,  155,  113,  155,  155,  114,
      155,  115,  155,  155,  155,  155,  155,  155,  155,  155,

      155,  116,  155,  138,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  117,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  118,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      119,  155,  155,  120,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  121,  155,  155,  122,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  123,  155,  155,  155,  155,  124,  155,  155,
      155,  155,  125,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  155,  154,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      155,  155,  155,  155,  155,  155,   84,  155,   85,   86,
      155,  155,  155,  155,  155,   87,  155,  155,  155,  155,
      155,   88,  155,  155,  155,   89,   90,  155,  155,  155,
      155,  155,  155,  155,   91,  155,   92,   93,  155,  155,
       94,  155,  155,   95,  155,  137,  155,  155,  155,  155,
      155,  155,  155,   96,  155,   97,   98,   99,  155,  101,
      155,  102,  155,  155,  155,  155,  155,  103,  155,  155,
      155,  155,  155,  104,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  105,  155,  155,  155,  155,  106,  107,

      108,  141,  155,  155,  155,  155,  155,  155,  155,  155,
      109,  155,  110,  155,  111,  140,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,   63,   64,  155,   65,  155,  155,  155,  155,
      155,  155,  155,   66,  155,  155,  155,  155,  155,   67,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  142,
       68,  155,   69,  155,  155,  155,  155,  100,  155,   70,
       71,  155,  155,  155,  155,   72,   73,  155,   74,   75,
      155,  139,  155,  155,  155,   76,   77,  155,  155,  155,
       78,  155,  155,   79,  155,  155,  155,  155,  155,   80,
      155,  155,  155,   81,  155,  155,  155,   82,  155,  155,

      155,   83,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,  155,   37,  155,  155,  155,   38,  155,   39,
      155,  155,  155,  155,   40,   41,  155,   42,   43,   44,

      155,   45,  155,  155,   47,   48,  155,  155,   49,   50,
       51,  155,  155,   52,  155,  136,  155,  155,   53,  155,
      155,  155,   54,  155,   55,  135,   56,   57,  155,   58,
      155,  155,  155,   59,   60,   61,   62,  155,  155,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   19,   20,   21,  155,

       22,   23,  155,  155,   24,   25,  155,   26,   27,   46,
      155,   28,   29,  155,  155,   30,  155,  155,   31,   32,
      155,   33,   34,  155,  155,  155,   35,   36,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      155,   14,  155,   15,  155,  155,  155,   16,  155,   17,
      155,  155,   18,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,   12,   13,  155,  155,
        9,  155,  155,   10,   11,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    7,  155,  155,    8,    2,    2,
        2,    2,  155,  155,    2,    2,  155,    6,    2,    2,
        5,    2,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,    6,    6,   11,
       12,   13,    6,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        6,    1,    6,    6,   41,   42,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
       67,   68,    6,   69,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[70] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    6,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    1
    } ;

static yyconst flex_uint16_t yy_base[1133] =
    {   0,
        0,    0,  475,  472,   69,    0,  455, 4462,  137,  139,
      425,    0, 4462, 4462,  135,  426,  137,  136,  398,  382,
        0,  132,  132,  140,  138,  149,  201,  142,  189,  245,
      127,  144,  188,  190,  213,  247,  242,  131,  203,  292,
      336,  259,  208,  240,  187,    0,  321,    0,  382,    0,
      218,  278,  376,  380,    0,    0,  276,  374,  288,  292,
      369,  365,  396,  465,  517,  570,  623,  672,  725,  293,
      396,  774,  289,  294,  315,  393,  827,  876,  449,  394,
      395,  927,  980,  471,  529,  547,  324,  333,  305,  321,
     4462,  330, 4462,  317,  306,  273, 4462, 4462, 4462, 4462,

        0,  207,  226,  394,  330,  297,  347,  397,    0,  397,
      352,  398,  465,  342,  461,  567,  454,  364,  392,  447,
      471,  485,  589,  479,  505,  510,  514,  518,  525,  524,
      526,  568,  620,  525,    0,  534,  582,  577,  626,  583,
      599,  604,  625,  631,  678,  617,  629,  633,  630,  634,
      649,  664,  674,    0,  679,  665,  669,  687,  685,  686,
      685,  693,  695,  735,  702,  703,  732,  733,  724,  743,
      736,  729,  728,  727,  773,  769,  768,  778,  784,  786,
      772,  793,  227, 4462,    0, 4462,    0,  328,    0,  238,
        0,  360,  228,  219,    0,    0,    0,    0,  798,  821,

      830,  859,  833,  870,  836,  914,  880,  926,  939,  979,
      981,  978,  921, 1034, 1024, 1031, 1022, 1025, 1057, 1080,
     1131, 1061, 1090, 1092,  903, 1116, 1104, 1117, 1133, 1158,
     1182, 1071, 1093, 1160, 1173, 1187, 1237, 1211, 1213, 1194,
     1227, 1262, 1315, 1253, 1249, 1284, 1288, 1299, 1243, 1306,
     1317, 1272, 1329, 1338, 1351, 1348, 1355, 1369, 1384, 1360,
     1382, 1407, 1409, 1411, 1420, 1418, 1434, 1445, 1451, 1467,
     1463, 1456, 1490, 1478, 1508, 1507, 1496, 1501, 1519, 1545,
      172,    0, 4462,  198,    0,  807,    0,  824,  832,    0,
      844,    0,  844,  845,  915, 1460,  919,  929,  967,  989,

      975,    0, 1489,    0,  985, 1019, 1557, 1038, 1046, 1040,
     1089, 1083, 1095,    0, 1138, 1148, 1169, 1176, 1197, 1203,
     1253, 1322, 1371,    0, 1370, 1393, 1526, 1514, 1528, 1528,
     1530, 1528, 1531, 1537, 1542, 1548, 1553, 1564, 1566, 1568,
     1576, 1554, 1566,    0, 1562, 1579, 1579, 1585, 1591, 1586,
      135, 1587, 1574, 1580, 1581,    0, 1592, 1588, 1588, 1606,
     1608, 1613, 1601, 1602, 1611, 1622, 1625, 1607, 1621, 1626,
     1618, 1631,    0, 1614, 1618, 1620, 1632,    0, 1629, 1627,
     1634, 1644,    0, 1646, 1641, 1635, 1661, 1649, 1646, 1666,
     1647, 1651, 1667, 1666, 1662, 4462,    0,  149, 1678, 1682,

     1687, 1689, 1705, 1691, 1700, 1701, 1722, 1716, 1731, 1743,
     1745, 1752, 1761, 1778, 1783, 1727, 1788, 1757, 1787, 1799,
     1814, 1820, 1813, 1817, 1824, 1839, 1843, 1853, 1855, 1854,
     1866, 1856, 1888, 1877, 1893, 1889, 1900, 1899, 1922, 1926,
     1932, 1939, 1953, 1962, 1965, 1949, 1971, 1975, 1998, 2000,
     2002, 1989, 2004, 2005, 2011, 2027, 2042, 2038, 2041, 2044,
     2063, 2074, 2080, 2085, 2096, 2097, 2103, 2078, 2114, 2109,
     2132, 2135, 2136, 2141, 2146, 2153, 2159, 2171, 2185, 2172,
     2206, 2175, 2208, 2197, 2204, 2209, 2215, 2231, 2238, 2240,
     2241, 2244, 2262, 2250, 2271, 2247, 2274, 2287, 2306, 2303,

     2309, 2312, 2327, 2330, 2345, 2352, 2361, 2359, 2364,    0,
     1682, 1705, 1734, 1810, 1893, 1910,    0, 1916,    0, 1919,
     1936, 1938, 1992, 2015, 2057,    0, 2053, 2094, 2092, 2173,
     2301,    0, 2313, 2310, 2313,    0,    0, 2327, 2357, 2353,
     2361, 2386, 2387, 2385,    0, 2371,    0,    0, 2392, 2383,
        0, 2390,  113,    0, 2391,    0, 2390, 2406, 2395, 2396,
     2404, 2405, 2417,    0, 2413,    0,    0,    0, 2406,    0,
     2416,    0, 2413, 2425, 2418, 2423, 2415,    0, 2437, 2437,
     2425, 2426, 2432,    0, 2445, 2446, 2438, 2442, 2442, 2442,
     2451, 2453, 2466,    0, 2471, 2469, 2474, 2465,    0,    0,

     2462,    0, 2479, 2470, 2464, 2485, 2467, 2482, 2486, 2485,
        0, 2473,    0, 2491,    0,    0, 2493, 2498, 2495, 2500,
     2522, 2524, 2525, 2531, 2529, 2536, 2554, 2558, 2561, 2580,
     2568, 2547, 2585, 2587, 2591, 2597, 2614, 2598, 2623, 2632,
     2630, 2627, 2641, 2648, 2663, 2657, 2666, 2688, 2697, 2670,
     2672, 2695, 2679, 2704, 2726, 2719, 2713, 2728, 2729, 2735,
     2759, 2740, 2753, 2742, 2771, 2785, 2780, 2782, 2796, 2744,
     2811, 2786, 2815, 2820, 2827, 2825, 2829, 2838, 2841, 2851,
     2867, 2885, 2878, 2856, 2874, 2883, 2901, 2907, 2917, 2908,
     2934, 2943, 2912, 2944, 2957, 2959, 2961, 2966, 2990, 2973,

     2976, 2995, 3000, 3012, 3006, 3011, 3033, 3017, 3044, 3046,
     3051, 3056, 3058, 3085, 3029, 3088, 3062, 3098, 3069, 3100,
     3102, 3103,    0,    0, 2517,    0, 2601, 2654, 2704, 2708,
     2766, 2779, 2822,    0, 2866, 2855, 2889, 2923, 2950,    0,
     2993, 3004, 3035, 3068, 3078, 3092, 3095, 3107, 3114,    0,
        0, 3117,    0, 3123, 3116, 3116, 3132,    0, 3119,    0,
        0, 3123, 3141, 3129, 3137,    0,    0, 3132,    0,    0,
     3147,    0, 3153, 3151, 3141,    0,    0, 3158, 3146, 3148,
        0, 3163, 3160,    0, 3169, 3168, 3153, 3171, 3178, 3162,
     3165, 3164, 3184,    0, 3181, 3184, 3185,    0, 3174, 3194,

     3198,    0, 3197, 3199, 3200, 3203, 3210, 3212, 3215, 3226,
     3241, 3255, 3236, 3239, 3257, 3262, 3266, 3268, 3271, 3292,
     3298, 3295, 3297, 3302, 3309, 3327, 3334, 3331, 3338, 3333,
     3349, 3360, 3365, 3371, 3372, 3374, 3378, 3384, 3390, 3389,
     3396, 3414, 3403, 3407, 3436, 3425, 3430, 3439, 3440, 3441,
     3446, 3463, 3476, 3479, 3470, 3475, 3477, 3481, 3502, 3506,
     3492, 3508, 3517, 3531, 3542, 3533, 3548, 3558, 3573, 3574,
     3564, 3552, 3587, 3589, 3598, 3604, 3599, 3608, 3620, 3629,
     3643, 3610, 3201,    0, 3196, 3279, 3265, 3297, 3321,    0,
     3451, 3488, 3501, 3614,    0,    0, 3616,    0,    0,    0,

     3623,    0, 3624, 3629,    0,    0, 3632, 3630,    0,    0,
        0, 3641, 3655,    0, 3655,    0, 3653, 3668,    0, 3650,
     3666, 3649,    0, 3672, 3660,    0,    0,    0, 3668,    0,
     3680, 3683, 3665,    0,    0,    0,    0, 3668, 3677, 3685,
     3686, 3690, 3695, 3696, 3717, 3721, 3720, 3722, 3732, 3746,
     3755, 3751, 3753, 3778, 3757, 3767, 3772, 3788, 3790, 3793,
     3797, 3791, 3807, 3809, 3814, 3823, 3824, 3828, 3833, 3847,
     3849, 3859, 3858, 3873, 3864, 3870, 3885, 3882, 3883, 3889,
     3896, 3915, 3899, 3914, 3920, 3925, 3926, 3955, 3956, 3949,
     3938, 3939, 3950, 3961, 3982, 3965,    0,    0,    0, 3701,

        0,    0, 3719, 3739,    0,    0, 3956,    0,    0,    0,
     3984,    0,    0, 3992, 3981,    0, 3981, 3996,    0,    0,
     3986,    0,    0, 3992, 3998, 4007,    0,    0, 4008, 4011,
     4012, 4017, 4021, 4026, 4027, 4042, 4043, 4044, 4053, 4057,
     4058, 4067, 4079, 4080, 4082, 4114, 4093, 4089, 4116, 4098,
     4104, 4119, 4123, 4125, 4135, 4148, 4150, 4149, 4154, 4159,
     4007, 4080, 4141,    0, 4150, 4150, 4159,    0, 4162,    0,
     4160, 4170,    0, 4191, 4185, 4195, 4192, 4206, 4221, 4217,
     4194, 4235, 4231, 4246, 4250, 4247,    0,    0, 4190, 4188,
        0, 4220, 4211,    0,    0, 4257, 4260, 4262, 4271, 4272,

     4293, 4287, 4286, 4296,    0, 4224, 4266,    0, 4302, 4323,
     4311, 4317, 4289, 4298, 4333, 4336, 4318,    0, 4340, 4342,
        0, 4347, 4462, 4414, 4420,  139, 4426, 4431, 4437, 4443,
     4449, 4455
    } ;

static yyconst flex_int16_t yy_def[1133] =
    {   0,
     1123,    1, 1124, 1124, 1123,    5, 1123, 1123, 1123, 1123,
     1123, 1125, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1127, 1123, 1128, 1123, 1129,
     1129, 1123, 1129, 1130, 1129, 1129, 1129, 1129, 1129, 1129,
     1129, 1129, 1131, 1131,   64,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65, 1132, 1129, 1123,
     1123, 1125, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1127, 1123, 1128, 1123, 1129, 1129, 1129, 1130,
     1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
     1132, 1129, 1123, 1123, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1123, 1129, 1129,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65, 1129,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65, 1126, 1126, 1126, 1126,

     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
     1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1126, 1126,   65,   65,   65,   65,   65,

       65,   65,   65,   65, 1126, 1126, 1126, 1126,   65,   65,
       65,   65, 1126, 1126,   65,   65, 1126, 1126,   65,   65,
     1126,   65,    0, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123
    } ;

static yyconst flex_uint16_t yy_nxt[4532] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   21,   45,   21,
        8,   46,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   21,   45,   21,   47,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,   73,   74,   75,   76,   77,   78,   79,   80,

       81,   82,   83,   84,   85,   86,   63,   87,   63,   50,
       88,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   63,   87,   63,   89,   90,   90,
       90,   90,   93,  101,   94,   96,   94,   97,   98,  102,
      108,  103,  115,  755,  110,  141,  116,  104,  398,  105,
      117,  111,  142,  106,  107,  160,  118,  130,  112,  119,
      109,  113,  114,  131,  120,  573,  121,  102,  108,  103,
      115,  122,  110,  141,  116,  104,  123,  105,  117,  111,
      142,  106,  107,  160,  118,  130,  112,  119,  109,  113,

      114,  131,  120,  132,  121,  182,  143,  284,  146,  122,
      144,  133,  147,  510,  123,  124,  145,  134,  148,  188,
       90,  161,  178,  125,  285,  162,  126,  149,  398,  127,
      179,  132,  128,  182,  143,  129,  146,  193,  144,  133,
      147,  150,  397,  124,  145,  134,  148,  151,  152,  161,
      178,  125,  285,  162,  126,  149,  157,  127,  179,  286,
      128,  180,  181,  129,  135,  136,  153,  158,  396,  150,
      137,  138,  139,  159,  154,  151,  152,  140,  155,   90,
       90,  156,  284,  191,  157,  192,  175,  286,  176,  180,
      181,  177,  135,  136,  153,  158,  194,  192,  137,  138,

      139,  159,  154,  195,  196,  140,  155,  199,  163,  156,
      164,  199,  240,  165,  175,   95,  176,  239,  228,  177,
      166,  167,   90,   90,  229,   96,   94,  199,  291,  188,
       90,  199,  199,  241,  283,  199,  163,  242,  164,  199,
      240,  165,  280,  243,  289,  239,  228,  290,  166,  167,
      168,  169,  229,  199,  170,  199,  291,  171,  172,  199,
      199,  241,  199,  292,  173,  242,  297,  174,  194,  192,
      280,  243,  289,  282,  187,  290,  198,  302,  168,  169,
      197,  199,  170,  193,  187,  171,  172,  189,  186,  184,
      199,  292,  173,  100,  297,  174,  187,  187,  311,  187,

      187,  187,  187,  187,  187,  302,  187,  187,  187,   99,
      230,  244,  199,  259,  199,  245,  293,  260,  231,  287,
      312,  246,  295,  298,  232,  299,  311,  288,  258,  296,
      294,  199,  199,  199,  199,   95,   91,  187,  230,  244,
      199,  259,  199,  245,  293,  260,  231,  287,  312,  246,
      295,  298,  232,  299, 1123,  288,  258,  296,  294,  199,
      199,  199,  199,  255,  187,  187,  187,  199,  187,  187,
      187,  187,  187,  187,  256,  187,  187,  187,   49,  313,
      257,   49,  200,  300,  201,  309,  310,  199,  314,  199,
      202,  255,  203,  301,  303,  199,  204,  205,  273,  304,

      274,  315,  256,  275,  321, 1123,  187,  313,  257,  199,
      200,  300,  201,  309,  310,  199,  314,  199,  202, 1123,
      203,  301,  303, 1123,  204,  205,  273,  304,  274,  315,
      322,  275,  321,  187,  199,  206,  199,  199,  323, 1123,
     1123, 1123,  199,  276,  199,  324,  325,  199,  199,  199,
      326,  277,  327, 1123,  328,  207, 1123, 1123,  322,  334,
     1123,  335,  199,  206,  199,  199,  323,  199,  278,  279,
      199,  276,  199,  324,  325,  199,  199,  199,  326,  277,
      327,  305,  328,  207,  208,  199,  306,  334,  199,  335,
     1123,  209,  307,  199, 1123,  199,  278,  279,  210,  308,

      329,  211,  212,  330,  336,  316,  337,  317,  199,  305,
      342,  318,  208,  199,  306, 1123,  199, 1123,  319,  209,
      307,  343,  320, 1123, 1123, 1123,  210,  308,  329,  211,
      212,  330,  336,  316,  337,  317,  199,  213,  342,  318,
      331,  214,  344,  338,  345,  215,  319,  332,  352,  343,
      320,  216,  333,  339,  217,  346,  353,  347,  340,  341,
      354,  199, 1123,  355, 1123,  213, 1123,  356,  331,  214,
      344,  338,  345,  215,  357,  332,  352, 1123,  358,  216,
      333,  339,  217,  346,  353,  347,  340,  341,  354,  199,
      199,  355,  348,  359,  349,  356,  360,  218,  361,  219,

      362,  363,  357,  364,  220,  350,  358,  365,  366,  221,
      199, 1123,  367,  369,  351, 1123,  370,  368,  199, 1123,
      348,  359,  349, 1123,  360,  218,  361,  219,  362,  363,
      374,  364,  220,  350,  375,  365,  366,  221,  199,  222,
      367,  369,  351,  199,  370,  368,  376,  223,  377,  378,
      224,  371, 1123,  225,  381,  382,  226,  383,  374,  227,
      372,  384,  375,  199, 1123, 1123, 1123,  222,  373,  379,
     1123,  199, 1123, 1123,  376,  223,  377,  378,  224,  371,
      380,  225,  381,  382,  226,  383,  387,  227,  372,  384,
      388,  199,  199,  233,  234,  385,  373,  379,  386,  235,

      236,  237,  391,  389,  393,  394,  238,  395,  380,  390,
     1123, 1123,  199, 1123,  387,  392,  199, 1123,  388, 1123,
      199,  233,  234,  385, 1123,  511,  386,  235,  236,  237,
      391,  389,  393,  394,  238,  395,  199,  390,  399,  199,
      199,  247,  512,  392,  199,  199, 1123,  403,  199, 1123,
      404,  199,  406,  511,  199,  248, 1123,  513,  514,  199,
     1123,  249,  250,  400,  199,  199,  399,  199,  199,  247,
      512,  199,  515,  199,  199,  403,  199,  199,  404,  199,
      406,  516,  199,  248,  401,  513,  514,  199,  199,  249,
      250,  400,  402,  199,  199,  251,  199,  199,  199,  199,

      515,  405,  199,  252, 1123,  199, 1123,  253,  199,  516,
      254, 1123,  401, 1123,  199, 1123,  199, 1123,  199, 1123,
      402,  199,  199,  251, 1123,  199,  199, 1123, 1123,  405,
     1123,  252,  199,  407,  438,  253,  199, 1123,  254,  199,
      517,  199,  199,  261,  199,  262,  199,  408,  263,  199,
      520,  409,  199,  411,  417,  264,  265,  199,  410,  418,
      199,  407,  438,  521,  199,  199, 1123,  199,  517,  199,
     1123,  261,  199,  262, 1123,  408,  263,  199,  520,  409,
      199,  411,  417,  264,  265,  199,  410,  418, 1123, 1123,
     1123,  521,  199,  199,  266,  267,  199,  199,  268,  414,

      522,  269,  270,  523,  412,  199,  413,  524,  271,  415,
      527,  272, 1123,  416, 1123, 1123,  199,  199,  199,  199,
     1123, 1123,  266,  267,  199,  199,  268,  414,  522,  269,
      270,  523,  412,  528,  413,  524,  271,  415,  527,  272,
      199,  416,  199,  199,  199,  199,  199,  199,  419,  199,
      426, 1123,  199,  420,  532,  423,  424,  427, 1123,  421,
      199,  528,  199,  199,  533,  425,  422, 1123,  199,  199,
      199,  199,  199,  534,  428,  199,  419,  199,  426,  199,
      199,  420,  532,  423,  424,  427,  435,  421,  199,  199,
      199,  199,  533,  425,  422,  199,  429,  199,  199,  199,

      199,  534,  428,  199,  535,  448, 1123,  199,  199,  199,
      199,  199,  536,  537,  435,  436, 1123,  199,  199, 1123,
      437, 1123,  199,  199,  429, 1123,  199,  199,  199,  440,
      199,  199,  535,  448,  199,  199,  199,  199,  199,  199,
      536,  537,  199,  436,  439,  441,  199,  430,  437,  431,
      199,  199,  538,  432,  199,  199,  199,  440,  199,  199,
      433,  442,  199,  199,  434, 1123,  539, 1123, 1123,  199,
      199,  199,  439,  441, 1123,  430,  199,  431,  199,  199,
      538,  432,  199,  199, 1123,  540, 1123,  449,  433,  442,
      443,  199,  434,  444,  539,  450,  199,  199,  199,  199,

      199, 1123,  445, 1123,  199,  199,  199, 1123,  541,  446,
     1123,  199,  199,  540,  447,  449,  451, 1123,  443,  199,
      199,  444,  542,  450,  199,  199,  199, 1123,  199,  199,
      445,  199,  458,  199,  543,  457,  541,  446,  456,  199,
      199, 1123,  447, 1123,  451,  199,  459, 1123,  199,  199,
      542,  199, 1123,  199,  452,  199, 1123,  199, 1123,  199,
      458,  199,  543,  457,  453,  199,  456,  199,  471,  454,
      455,  199, 1123,  199,  459,  199,  467,  199, 1123,  199,
      199,  199,  452,  199,  466,  544,  460,  199,  461,  199,
      199,  199,  453,  199, 1123,  199,  471,  454,  455,  199,

      199, 1123,  199,  199,  467, 1123,  199, 1123,  199,  199,
      199,  468,  466,  544,  460,  199,  461,  199,  199,  199,
      472,  469,  199, 1123,  199, 1123,  199, 1123,  199,  462,
      199,  463,  470,  199,  199,  199,  473,  199,  199,  468,
      545, 1123,  464, 1123,  199,  199,  474,  199,  472,  469,
      199,  465,  199,  199,  199,  199,  199,  462, 1123,  463,
      470,  199,  477,  199,  473,  199,  199,  199,  545,  199,
      464,  475,  199,  478,  474,  199,  199,  479,  199,  465,
      483,  199,  476,  199,  199,  546,  199,  199, 1123,  199,
      477,  480, 1123,  199,  199,  199,  547,  199,  199,  475,

      199,  478,  199,  484,  199,  479,  199,  199,  483, 1123,
      476,  481, 1123,  546,  199,  199,  482,  199,  548,  480,
      199,  199,  199,  485,  547,  199,  199,  199,  199,  199,
      199,  484,  486,  491,  490,  199,  199,  488,  199,  481,
      487, 1123,  489, 1123,  482,  199,  548,  199,  199,  199,
      199,  485,  199,  199, 1123,  199,  199,  199,  199,  492,
      486,  491,  490,  199,  199,  488,  199, 1123,  487,  495,
      489,  493,  199,  199,  199,  199,  518,  199,  519, 1123,
      199,  199,  494,  199,  199,  199,  199,  492, 1123,  199,
      498,  199,  497,  496,  199,  501,  199,  495, 1123,  493,

      199,  199,  199,  525,  518,  199,  519,  526,  199,  199,
      494,  199,  499,  199,  505,  500,  199,  199,  498,  507,
      497,  496,  199,  501,  199,  199,  199,  506,  199,  199,
      502,  525,  503,  199,  199,  526,  199,  199,  504,  199,
      499,  549,  505,  500,  199,  199,  199,  507,  550,  551,
      552,  553,  508,  199,  199,  506,  199,  199,  502,  509,
      503,  554,  199,  199,  555,  199,  504,  199,  556,  549,
      557,  529,  558,  199,  199,  530,  550,  551,  552,  553,
      508,  559,  560,  199,  561,  199,  562,  509,  565,  554,
      531,  199,  555,  566,  563,  567,  556,  568,  557,  529,

      558,  569,  570,  530,  564,  571,  572,  574,  575,  559,
      560,  199,  561,  576,  562,  577,  565,  578,  531,  579,
      580,  566,  563,  567,  581,  568,  582,  583,  584,  569,
      570,  585,  564,  571,  572,  574,  575,  586,  587,  588,
      589,  576,  590,  577,  591,  578,  592,  579,  580,  593,
      594,  595,  581,  596,  582,  583,  584,  597,  598,  585,
      599,  600,  601,  606,  602,  586,  587,  588,  589,  604,
      590,  605,  591,  603,  592,  607,  608,  593,  594,  595,
      609,  596,  610,  611,  612,  597,  598,  615,  599,  600,
      601,  606,  602,  616,  613, 1123,  199,  604,  614,  605,

      617,  603, 1123,  607,  608,  199, 1123,  618,  609,  199,
      610,  611,  612,  723,  620,  615,  199, 1123,  199,  199,
      199,  616,  613,  199,  199,  199,  614,  199,  617,  199,
      619, 1123, 1123,  199,  199,  618,  724,  199,  199,  199,
      199,  723,  620,  199,  199,  199,  199,  199,  199,  199,
      621,  199,  622,  199,  199,  199,  623,  199,  619,  624,
      199,  625,  199,  199,  724,  199,  199,  199,  199,  199,
      199,  199,  725,  199, 1123,  199,  626,  199,  621,  199,
      622,  199,  199,  199,  623, 1123,  627,  624,  199,  625,
      199,  199,  629,  199,  628,  199,  199,  199,  199,  199,

      725,  199,  631,  199,  626,  199,  632,  199, 1123,  199,
     1123,  199,  633,  634,  627,  630,  199,  199,  199, 1123,
      629,  199,  628,  199,  199,  199,  199,  199,  635,  199,
      631,  639,  636,  199,  632,  199,  638,  199,  199,  641,
      633,  634,  199,  630,  199,  199, 1123,  637,  726,  199,
      640,  199,  199,  199,  199,  199,  635,  199,  199,  639,
      636,  643,  199,  199,  638,  199,  199,  641,  642,  644,
      199,  199,  645,  199,  199,  637,  726,  199,  640,  199,
      199,  199,  646,  199,  199,  199,  199, 1123,  647,  643,
      199,  199,  199,  199,  199,  199,  642,  644, 1123,  199,

      645,  199,  199, 1123,  199,  199,  199,  651,  649,  199,
      646,  199,  199,  648,  652,  199,  647,  199,  199,  199,
      199,  199,  199,  199,  727,  650,  199,  199,  728, 1123,
      729,  199,  199,  730,  199,  651,  649,  199,  199,  199,
      199,  648,  652,  199,  199,  199,  199,  655,  653, 1123,
      199,  654,  727,  650,  199,  199,  728,  199,  729,  199,
      199,  730,  731, 1123,  199,  199,  199,  199,  199,  732,
      199,  199,  199,  656,  657,  655,  653,  199,  199,  654,
      199, 1123,  660,  199,  658,  199,  659,  199,  199,  199,
      731,  199,  199,  199, 1123,  199, 1123,  732,  199,  199,

      199,  656,  657,  199,  661,  199,  662,  666,  199,  199,
      660,  199,  658,  199,  659,  199,  199,  199,  199,  199,
      199,  199,  667,  668,  664,  733,  663,  199,  199,  669,
      665,  199,  661, 1123,  662,  666,  199,  199,  199,  670,
      199,  199,  199,  199,  199,  199,  199,  734,  199,  199,
      667,  668,  664,  733,  663,  199,  199,  669,  665,  199,
      199,  671,  674, 1123,  199,  199,  199,  670,  199,  672,
      199,  199,  735,  199,  673,  734,  199,  199,  736,  199,
      199,  199,  199, 1123,  199,  675, 1123,  199,  199,  671,
      674,  676,  199,  199,  677, 1123,  199,  672,  199, 1123,

      735,  199,  673,  199,  199,  678,  736,  199,  199,  199,
      199,  682,  199,  675,  199,  199,  199,  680,  199,  676,
      199,  199,  677,  199,  199, 1123,  199,  199,  737,  199,
      738,  199,  199,  678,  199,  199,  679,  681, 1123,  682,
      199,  199,  199,  199,  199,  680,  199,  199,  683,  199,
      199,  199,  199,  199,  199,  199,  737,  684,  738,  687,
      199, 1123,  199,  199,  688,  681,  685,  689,  686,  199,
      199,  199, 1123,  199,  199,  199,  683,  199,  199,  199,
      199,  199,  199, 1123,  199,  684,  690,  687,  693,  199,
      199,  199,  688,  199,  685,  689,  686,  199,  199,  199,

      691,  199,  199,  199, 1123,  199,  739,  199,  695,  199,
      199,  692,  199,  199,  690,  697,  693,  199,  199,  199,
      694,  199,  199,  199,  199,  199,  199,  699,  691,  696,
     1123,  199,  698,  199,  739,  199,  695,  199,  199,  692,
     1123,  199,  199,  697,  199, 1123,  199,  199,  694,  199,
      199,  199,  199,  199,  199,  699,  199,  696,  199,  199,
      698,  199,  199,  199, 1123,  707,  703,  700,  199,  199,
      199,  701,  199,  702,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  705,  199,  199,  199,  199,  199,  199,
      199,  704,  199,  707,  703,  700,  199,  199,  706,  701,

      199,  702, 1123, 1123,  199,  708,  199,  199,  199,  199,
      199,  705,  199,  199,  709,  740,  199,  199, 1123,  704,
      199,  199, 1123,  713,  199,  199,  706,  199,  199,  741,
      199,  712,  742,  708,  710, 1123,  711,  199,  743,  714,
      199,  199,  709,  740,  199,  199,  716,  199,  199,  199,
      199,  713,  199,  199, 1123,  199,  744,  741,  199,  712,
      742,  715,  710,  199,  711,  199,  743,  714,  199,  199,
      199, 1123,  199,  199,  716,  199,  199,  199,  199,  199,
      721,  717,  199,  199,  744,  718,  745,  746,  719,  715,
      199,  199,  720,  199,  747,  722,  199,  199,  199,  199,

      748,  749,  199,  750,  751,  199,  752,  199,  721,  717,
      199,  199,  753,  718,  745,  746,  719,  754,  199,  756,
      720,  757,  747,  722,  758,  199,  759,  199,  748,  749,
      199,  750,  751,  760,  752,  761,  762,  763,  765,  766,
      753,  767,  768,  769,  772,  754,  773,  756,  764,  757,
      770,  771,  758,  774,  759,  775,  776,  777,  778,  779,
      780,  760,  781,  761,  762,  763,  765,  766,  782,  767,
      768,  769,  772,  783,  773,  784,  764,  785,  770,  771,
      786,  774,  787,  775,  776,  777,  778,  779,  780,  788,
      781,  789,  790,  791,  792,  793,  782,  794,  795,  796,

      797,  783,  798,  784,  799,  785,  800,  801,  786,  802,
      787,  199, 1123,  199, 1123, 1123,  199,  788,  199,  789,
      790,  791,  792,  793,  803,  794,  795,  796,  797,  804,
      798,  199,  799,  805,  800,  801,  199,  802,  806,  199,
      199,  199,  808,  199,  199,  809,  199,  199, 1123,  199,
      810, 1123,  803,  807,  199, 1123,  883,  804, 1123,  199,
      199,  805,  199,  199,  199,  199,  806,  199,  199,  199,
      808,  199,  199,  809,  199,  199,  199,  199,  810,  199,
      811,  807,  199,  815,  883,  199,  199, 1123,  199,  812,
      199,  199,  199,  199,  813,  199,  199,  199,  199,  199,

      199, 1123,  199,  199,  199,  199,  199,  199,  811,  199,
      816,  815,  814,  199,  199,  199,  199,  812,  199,  884,
      199,  817,  813,  199,  199,  199,  199,  199,  820,  818,
      819,  199,  199,  199,  199,  199,  199,  199,  816,  821,
      814,  199, 1123,  199,  199,  199,  199,  884,  199,  817,
      199,  199,  199,  199,  822,  823,  820,  818,  819,  199,
      199,  199, 1123,  199,  199,  199,  199,  821,  199,  199,
      199, 1123,  885,  199, 1123,  199,  199,  824,  199,  199,
      199,  199,  822,  823,  199, 1123,  199,  199,  830,  199,
      199,  826,  825,  199,  199,  199,  199,  199,  199,  827,

      885,  199,  828,  199,  199,  824,  199,  199,  199,  199,
      199,  829,  199,  199,  199,  199,  830,  199,  199,  826,
      825,  886,  199,  199,  887,  199,  199,  827,  831,  199,
      828,  199,  199,  199,  199,  199,  199,  199,  199,  829,
      832,  199,  199,  199,  199,  199,  199,  199,  833,  886,
      199,  199,  887,  199,  199,  834,  831,  199,  199,  199,
      838,  199,  199,  199,  199,  199,  199,  199,  832,  835,
      199,  199,  199,  199,  199,  199,  833,  199,  199,  199,
      199,  199,  199,  834,  837,  199,  199,  836,  838,  199,
      199,  199,  199,  888,  199,  199, 1123,  199,  199,  199,

      199,  199,  839,  199,  199,  199,  199,  889,  199,  199,
      199,  841,  837,  842,  199,  836,  843,  199,  199,  199,
      199,  888,  840,  199,  199,  199,  199,  844,  199,  199,
      839,  199,  199,  199,  199,  889,  845,  199,  199,  841,
      890,  842,  199,  199,  843,  199,  199,  199,  199,  199,
      840,  199,  199,  199,  847,  844,  199,  199,  199,  199,
      846,  199,  199,  199,  845,  199,  199,  199,  890,  849,
      848,  199, 1123,  199,  199,  199,  199,  199, 1123,  199,
      891,  199,  847,  892,  199,  199,  199,  199,  846,  199,
      854,  199,  199,  199,  199,  199,  199,  849,  848,  850,

      851,  855,  199,  199,  199,  199,  852,  199,  891,  853,
     1123,  892,  199,  199,  893, 1123,  199,  199,  854,  199,
      199,  199,  199,  199,  199,  199,  199,  850,  851,  855,
      199,  199,  856,  199,  852,  199,  861,  853,  857,  199,
      199,  894,  893,  858,  199,  199,  199,  199,  859,  199,
      199,  199,  199,  199,  199,  199, 1123,  860,  199, 1123,
      856,  199,  199,  199,  861, 1123,  857,  199,  895,  894,
      862,  858,  199,  199,  199,  199,  859,  199,  199,  199,
      199,  199,  199,  199,  199,  860, 1123,  865,  863,  199,
      199,  199,  864,  866,  868,  199,  895,  199,  862,  199,

      199, 1123, 1123,  199,  199,  199,  867,  199,  199,  199,
      199,  199,  199,  199,  199,  865,  863,  869,  870,  199,
      864,  866,  868,  199,  199,  199,  896,  199,  199,  199,
      199,  897,  199,  199,  867,  199,  199, 1123,  199,  199,
      871,  199,  199, 1123,  199,  869,  870,  879, 1123,  199,
      199,  199,  199,  898,  896,  199,  199,  199,  199,  897,
      873,  199,  199,  199,  199,  872,  199,  199,  871,  199,
      876,  199,  199,  874,  199,  879,  199,  199,  199,  199,
      199,  898,  199,  199,  199,  875,  899,  199,  873,  199,
      199,  877,  199,  872,  199,  199,  199,  199,  876,  199,

      199,  874,  199,  199,  199,  878,  199,  199,  199,  880,
      199,  900,  199,  875,  899,  199,  199,  199,  882,  877,
      199,  199,  199,  199,  199,  901,  199,  902,  199,  903,
      904,  199,  881,  878,  199,  199,  199,  880,  199,  900,
      199,  199,  905,  906,  199,  907,  882,  908,  199,  199,
      909,  199,  910,  901,  199,  902,  911,  903,  904,  912,
      881,  913,  914,  915,  199,  916,  199,  917,  199,  199,
      905,  906,  918,  907,  919,  908,  920,  921,  909,  922,
      910,  923,  924,  925,  911,  926,  927,  912,  928,  913,
      914,  915,  929,  916,  930,  917,  931,  932,  933,  934,

      918,  935,  919,  936,  920,  921,  937,  922,  938,  923,
      924,  925,  939,  926,  927,  199,  928,  199,  199,  997,
      929,  199,  930,  998,  931,  932,  933,  934,  941,  935,
      942,  936,  943,  199,  937,  199,  938,  199,  199,  940,
      939,  199,  944,  199,  199,  199,  199,  997,  199,  199,
      199,  998, 1123,  199,  947, 1123,  941,  199,  942,  199,
      943,  199, 1123,  199,  199,  199,  199,  940,  945,  199,
      944,  948,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  947,  946,  199,  199,  951,  199, 1123,  952,
      949,  950,  199,  199, 1123,  199,  945,  999, 1000,  948,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  946,  199,  199,  951,  955,  199,  952,  949,  950,
      956,  199,  954,  199, 1123,  999, 1000,  199,  199, 1001,
      199,  953,  199,  199,  199,  199,  199,  199,  199, 1123,
      199,  199,  957,  955,  199,  199, 1002,  199,  956,  199,
      954,  199,  199,  960,  961,  199,  199, 1001,  199,  953,
      958,  199, 1123,  199,  199,  199,  959,  199,  199,  199,
      957,  199,  199,  199, 1002,  199,  199,  199,  199,  199,
      199,  960,  961,  199,  199,  962, 1123,  199,  958,  199,
      199,  963,  199,  199,  959,  199,  966,  199,  199,  199,

      199,  964,  199,  199,  199,  965,  199,  199,  199,  199,
      199,  199,  199,  962,  199,  199,  199,  199,  199,  963,
      199,  969,  199,  967,  966,  199,  199,  199,  199,  964,
      199,  199,  199,  965,  199,  199,  199,  199,  199,  970,
      199,  199,  199,  199,  199,  199, 1123,  968,  199,  969,
      199,  967,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  971,  199,  199,  973, 1123, 1123,  970,  199,  199,
      972,  199, 1123,  199,  199,  968,  199,  199,  199,  199,
      199,  199,  199, 1003,  199,  199,  199,  199,  199,  971,
      974,  199,  973,  199,  199,  199,  199,  199,  972,  977,

      975,  199,  199,  976, 1004,  199,  199,  199,  199,  199,
      199, 1003,  199,  199,  199,  199,  199,  199,  974,  199,
      199,  199,  199,  199,  199,  199,  980,  977,  975,  199,
      199,  976, 1004,  978, 1005,  199,  199,  979,  199,  981,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      983,  199,  199, 1123,  980,  199,  982, 1123,  199, 1123,
      199,  978, 1005,  199, 1123,  979,  199,  981,  199,  199,
      199,  199,  199, 1123,  199,  985,  199,  199,  983,  199,
      199,  984,  199,  199,  982,  989,  199,  986,  199, 1123,
      199,  199,  199, 1123,  199,  988,  199,  199,  199,  199,

     1123,  990,  199,  985,  199,  199,  987,  199,  199,  984,
      199,  199,  199,  989,  199,  986,  991,  993,  199,  199,
      199,  992,  199,  988,  199,  199,  199,  199,  199,  990,
      199, 1006, 1007,  199,  987,  199,  199,  199,  199,  199,
      199, 1008,  199,  995,  991,  993,  199,  199,  199,  992,
      199, 1009,  994,  199,  199,  199,  199,  996,  199, 1006,
     1007,  199, 1010, 1011,  199,  199,  199,  199, 1012, 1008,
      199,  995, 1013, 1014,  199,  199,  199, 1015, 1016, 1009,
      994,  199, 1017, 1018, 1019,  996,  199, 1020, 1021,  199,
     1010, 1011, 1022, 1023, 1024,  199, 1012, 1025, 1026, 1027,

     1013, 1014, 1028, 1029,  199, 1015, 1016, 1123,  199,  199,
     1017, 1018, 1019, 1031,  199, 1020, 1021, 1030, 1123, 1061,
     1022, 1023, 1024,  199,  199, 1025, 1026, 1027,  199, 1032,
     1028, 1029,  199,  199,  199,  199,  199, 1062,  199,  199,
      199, 1031,  199, 1123, 1123, 1030, 1034, 1061, 1036, 1033,
      199,  199,  199, 1063, 1035,  199,  199, 1032,  199,  199,
      199,  199,  199,  199,  199, 1062,  199,  199,  199,  199,
      199,  199, 1038,  199, 1034,  199, 1036, 1033,  199, 1037,
     1123, 1063, 1035,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1039,  199,  199,  199,  199,  199,

     1038,  199, 1123,  199, 1123,  199, 1040, 1037,  199,  199,
      199,  199,  199,  199, 1123,  199,  199,  199,  199,  199,
     1041,  199, 1039,  199,  199,  199,  199,  199,  199,  199,
     1042,  199,  199,  199, 1040,  199,  199,  199,  199,  199,
     1043,  199,  199,  199,  199,  199,  199,  199, 1041, 1123,
     1123,  199, 1044,  199,  199,  199,  199,  199, 1042,  199,
      199,  199,  199,  199, 1045, 1046,  199,  199, 1043,  199,
      199,  199, 1123,  199,  199,  199,  199,  199, 1049,  199,
     1044, 1047,  199, 1123, 1123,  199, 1123,  199,  199,  199,
      199,  199, 1045, 1046,  199,  199,  199,  199, 1048,  199,

     1051,  199,  199,  199,  199,  199, 1049,  199,  199, 1047,
      199,  199, 1053,  199,  199,  199,  199,  199, 1050,  199,
      199, 1052, 1123,  199,  199,  199, 1048,  199, 1051,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1053, 1123,  199,  199,  199,  199, 1050, 1054,  199, 1052,
     1055,  199,  199,  199, 1123,  199,  199,  199,  199, 1123,
      199,  199,  199,  199,  199,  199,  199,  199,  199, 1056,
     1057,  199,  199,  199,  199, 1054,  199,  199, 1055,  199,
      199,  199, 1058,  199,  199,  199,  199,  199,  199, 1064,
     1060,  199,  199,  199,  199,  199,  199, 1056, 1057,  199,

      199,  199,  199,  199,  199,  199, 1065,  199, 1066, 1067,
     1058,  199, 1068, 1059, 1069,  199,  199, 1064, 1060, 1070,
      199,  199,  199, 1071, 1072, 1073,  199,  199,  199,  199,
      199,  199, 1123, 1123, 1065, 1074, 1066, 1067, 1087,  199,
     1068, 1059, 1069, 1123,  199, 1075,  199, 1070,  199,  199,
      199, 1071, 1072, 1073,  199,  199, 1076,  199,  199,  199,
      199,  199,  199, 1074,  199,  199, 1087,  199, 1123, 1123,
     1123,  199,  199, 1075,  199,  199,  199,  199,  199, 1123,
      199,  199,  199,  199, 1076,  199, 1077,  199,  199,  199,
      199,  199,  199,  199, 1123,  199,  199,  199,  199,  199,

      199, 1078, 1123,  199,  199,  199, 1123,  199,  199,  199,
      199,  199, 1088,  199, 1077, 1123, 1082,  199,  199,  199,
      199, 1080,  199,  199,  199,  199,  199,  199,  199, 1078,
     1079,  199,  199,  199,  199,  199,  199,  199, 1123,  199,
     1088,  199,  199,  199, 1082,  199,  199, 1081,  199, 1080,
      199, 1123,  199,  199,  199,  199, 1083,  199, 1079,  199,
      199,  199,  199,  199,  199,  199,  199, 1086,  199,  199,
      199,  199,  199,  199, 1089, 1081, 1085,  199, 1090, 1084,
      199,  199,  199, 1091, 1083,  199,  199,  199,  199,  199,
     1092,  199,  199, 1093,  199, 1086,  199,  199, 1094, 1095,

      199,  199, 1089,  199, 1085,  199, 1090, 1084, 1105,  199,
      199, 1091,  199,  199,  199,  199,  199, 1097, 1092, 1106,
      199, 1093, 1096,  199,  199,  199, 1094, 1095, 1098,  199,
      199,  199,  199,  199, 1099,  199, 1105,  199,  199,  199,
      199,  199, 1107, 1108,  199, 1097, 1113, 1106, 1101,  199,
     1096,  199,  199,  199, 1100,  199, 1098,  199,  199,  199,
      199,  199, 1099,  199,  199,  199, 1102,  199,  199,  199,
     1107, 1108,  199,  199, 1113,  199, 1101,  199,  199, 1104,
     1109,  199, 1100,  199, 1103,  199, 1123,  199,  199,  199,
      199, 1123,  199,  199, 1102,  199,  199,  199,  199, 1114,

      199,  199, 1110,  199,  199,  199,  199, 1104, 1109,  199,
      199,  199, 1103,  199,  199, 1111,  199,  199,  199, 1112,
      199, 1123, 1117,  199,  199,  199,  199, 1114,  199,  199,
     1110,  199,  199,  199,  199,  199, 1118,  199,  199,  199,
      199,  199,  199, 1111, 1116, 1115, 1123, 1112,  199,  199,
     1117,  199,  199,  199,  199,  199, 1121,  199,  199,  199,
      199,  199,  199,  199, 1118,  199, 1119, 1123,  199,  199,
     1123,  199, 1116, 1115, 1120, 1123, 1123,  199, 1122,  199,
      199, 1123,  199,  199, 1121,  199,  199, 1123,  199,  199,
     1123, 1123, 1123,  199, 1119, 1123, 1123, 1123, 1123,  199,

     1123, 1123, 1120, 1123, 1123, 1123, 1122, 1123,  199, 1123,
     1123, 1123, 1123,  199,   48,   48,   48,   48,   48,   48,
       92, 1123, 1123,   92,   92,   92,  183, 1123,  183,  183,
      183,  185,  185,  185, 1123,  185,  185,  187, 1123,  187,
      187,  187,  187,  190, 1123,  190,  190,  190,  190,  199,
     1123,  199,  199,  199,  199,  281, 1123,  281,  281,  281,
      281,    7, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,

     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123
    } ;

static yyconst flex_int16_t yy_chk[4532] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    9,    9,
       10,   10,   15, 1126,   15,   17,   17,   18,   18,   22,
       23,   22,   25,  553,   24,   31,   25,   22,  398,   22,
       25,   24,   32,   22,   22,   38,   25,   28,   24,   25,
       23,   24,   24,   28,   26,  351,   26,   22,   23,   22,
       25,   26,   24,   31,   25,   22,   26,   22,   25,   24,
       32,   22,   22,   38,   25,   28,   24,   25,   23,   24,

       24,   28,   26,   29,   26,   45,   33,  284,   34,   26,
       33,   29,   34,  281,   26,   27,   33,   29,   34,   51,
       51,   39,   43,   27,  102,   39,   27,   35,  194,   27,
       43,   29,   27,   45,   33,   27,   34,  193,   33,   29,
       34,   35,  190,   27,   33,   29,   34,   35,   35,   39,
       43,   27,  102,   39,   27,   35,   37,   27,   43,  103,
       27,   44,   44,   27,   30,   30,   36,   37,  183,   35,
       30,   30,   30,   37,   36,   35,   35,   30,   36,   52,
       52,   36,   96,   57,   37,   57,   42,  103,   42,   44,
       44,   42,   30,   30,   36,   37,   59,   59,   30,   30,

       30,   37,   36,   60,   60,   30,   36,   73,   40,   36,
       40,   70,   74,   40,   42,   95,   42,   73,   70,   42,
       40,   40,   90,   90,   70,   94,   94,   73,  106,  188,
      188,   70,   74,   75,   92,   73,   40,   75,   40,   70,
       74,   40,   87,   75,  105,   73,   70,  105,   40,   40,
       41,   41,   70,   75,   41,   73,  106,   41,   41,   70,
       74,   75,   87,  107,   41,   75,  111,   41,  192,  192,
       87,   75,  105,   89,   88,  105,   62,  114,   41,   41,
       61,   75,   41,   58,   54,   41,   41,   53,   49,   47,
       87,  107,   41,   20,  111,   41,   63,   63,  118,   63,

       63,   63,   63,   63,   63,  114,   63,   63,   63,   19,
       71,   76,   80,   81,   71,   76,  108,   81,   71,  104,
      119,   76,  110,  112,   71,  112,  118,  104,   80,  110,
      108,   76,   80,   81,   71,   16,   11,   63,   71,   76,
       80,   81,   71,   76,  108,   81,   71,  104,  119,   76,
      110,  112,   71,  112,    7,  104,   80,  110,  108,   76,
       80,   81,   71,   79,   63,   64,   64,   79,   64,   64,
       64,   64,   64,   64,   79,   64,   64,   64,    4,  120,
       79,    3,   64,  113,   64,  117,  117,   79,  121,   84,
       64,   79,   64,  113,  115,   79,   64,   64,   84,  115,

       84,  122,   79,   84,  124,    0,   64,  120,   79,   84,
       64,  113,   64,  117,  117,   79,  121,   84,   64,    0,
       64,  113,  115,    0,   64,   64,   84,  115,   84,  122,
      125,   84,  124,   64,   65,   65,   65,   84,  126,    0,
        0,    0,   65,   85,   65,  127,  128,   85,   65,   65,
      129,   85,  130,    0,  131,   65,    0,    0,  125,  134,
        0,  136,   65,   65,   65,   86,  126,   85,   86,   86,
       65,   85,   65,  127,  128,   85,   65,   65,  129,   85,
      130,  116,  131,   65,   66,   86,  116,  134,   66,  136,
        0,   66,  116,   86,    0,   85,   86,   86,   66,  116,

      132,   66,   66,  132,  137,  123,  138,  123,   66,  116,
      140,  123,   66,   86,  116,    0,   66,    0,  123,   66,
      116,  141,  123,    0,    0,    0,   66,  116,  132,   66,
       66,  132,  137,  123,  138,  123,   66,   67,  140,  123,
      133,   67,  142,  139,  143,   67,  123,  133,  146,  141,
      123,   67,  133,  139,   67,  144,  147,  144,  139,  139,
      148,   67,    0,  149,    0,   67,    0,  150,  133,   67,
      142,  139,  143,   67,  151,  133,  146,    0,  152,   67,
      133,  139,   67,  144,  147,  144,  139,  139,  148,   67,
       68,  149,  145,  153,  145,  150,  155,   68,  156,   68,

      157,  158,  151,  159,   68,  145,  152,  159,  160,   68,
       68,    0,  161,  162,  145,    0,  163,  161,   68,    0,
      145,  153,  145,    0,  155,   68,  156,   68,  157,  158,
      165,  159,   68,  145,  166,  159,  160,   68,   68,   69,
      161,  162,  145,   69,  163,  161,  167,   69,  168,  169,
       69,  164,    0,   69,  171,  172,   69,  173,  165,   69,
      164,  174,  166,   69,    0,    0,    0,   69,  164,  170,
        0,   69,    0,    0,  167,   69,  168,  169,   69,  164,
      170,   69,  171,  172,   69,  173,  176,   69,  164,  174,
      177,   69,   72,   72,   72,  175,  164,  170,  175,   72,

       72,   72,  179,  178,  180,  181,   72,  182,  170,  178,
        0,    0,   72,    0,  176,  179,  199,    0,  177,    0,
       72,   72,   72,  175,    0,  286,  175,   72,   72,   72,
      179,  178,  180,  181,   72,  182,  199,  178,  200,  200,
       72,   77,  288,  179,  199,   77,    0,  203,  201,    0,
      203,  203,  205,  286,  205,   77,    0,  289,  291,  200,
        0,   77,   77,  201,  199,   77,  200,  200,  201,   77,
      288,  203,  293,   77,  205,  203,  201,  202,  203,  203,
      205,  294,  205,   77,  202,  289,  291,  200,  204,   77,
       77,  201,  202,   77,   78,   78,  201,  202,  207,  203,

      293,  204,  205,   78,    0,  202,    0,   78,  204,  294,
       78,    0,  202,    0,   78,    0,  204,    0,  207,    0,
      202,  225,   78,   78,    0,  202,  207,    0,    0,  204,
        0,   78,  206,  206,  225,   78,  204,    0,   78,  213,
      295,  225,   78,   82,  208,   82,  207,  206,   82,  225,
      297,  208,  206,  209,  213,   82,   82,  209,  208,  213,
      206,  206,  225,  298,  208,   82,    0,  213,  295,  225,
        0,   82,  208,   82,    0,  206,   82,  209,  297,  208,
      206,  209,  213,   82,   82,  209,  208,  213,    0,    0,
        0,  298,  208,   82,   83,   83,  212,  210,   83,  211,

      299,   83,   83,  300,  210,  209,  210,  301,   83,  211,
      305,   83,    0,  212,    0,    0,  212,  210,   83,  211,
        0,    0,   83,   83,  212,  210,   83,  211,  299,   83,
       83,  300,  210,  306,  210,  301,   83,  211,  305,   83,
      217,  212,  215,  218,  212,  210,   83,  211,  214,  216,
      217,    0,  214,  214,  308,  215,  215,  218,    0,  214,
      217,  306,  215,  218,  309,  216,  214,    0,  217,  216,
      215,  218,  214,  310,  219,  219,  214,  216,  217,  222,
      214,  214,  308,  215,  215,  218,  222,  214,  217,  232,
      215,  218,  309,  216,  214,  219,  220,  216,  220,  222,

      214,  310,  219,  219,  311,  232,    0,  222,  223,  232,
      224,  233,  312,  313,  222,  223,    0,  232,  220,    0,
      224,    0,  227,  219,  220,    0,  220,  222,  223,  227,
      224,  233,  311,  232,  226,  228,  223,  232,  224,  233,
      312,  313,  227,  223,  226,  228,  220,  221,  224,  221,
      227,  229,  315,  221,  226,  228,  223,  227,  224,  233,
      221,  229,  226,  228,  221,    0,  316,    0,    0,  221,
      227,  229,  226,  228,    0,  221,  230,  221,  234,  229,
      315,  221,  226,  228,    0,  317,    0,  234,  221,  229,
      230,  235,  221,  230,  316,  235,  230,  221,  234,  229,

      231,    0,  231,    0,  230,  236,  234,    0,  318,  231,
        0,  235,  240,  317,  231,  234,  236,    0,  230,  235,
      231,  230,  319,  235,  230,  236,  234,    0,  231,  238,
      231,  239,  240,  236,  320,  239,  318,  231,  238,  235,
      240,    0,  231,    0,  236,  241,  241,    0,  231,  238,
      319,  239,    0,  236,  237,  237,    0,  238,    0,  239,
      240,  249,  320,  239,  237,  241,  238,  245,  249,  237,
      237,  244,    0,  241,  241,  237,  245,  238,    0,  239,
      242,  249,  237,  237,  244,  321,  242,  245,  242,  249,
      252,  244,  237,  241,    0,  245,  249,  237,  237,  244,

      242,    0,  246,  237,  245,    0,  247,    0,  242,  249,
      252,  246,  244,  321,  242,  245,  242,  248,  252,  244,
      250,  247,  246,    0,  250,    0,  247,    0,  242,  243,
      246,  243,  248,  243,  247,  251,  251,  248,  252,  246,
      322,    0,  243,    0,  250,  248,  253,  253,  250,  247,
      246,  243,  250,  243,  247,  251,  254,  243,    0,  243,
      248,  243,  256,  251,  251,  248,  256,  253,  322,  255,
      243,  254,  250,  257,  253,  253,  254,  257,  260,  243,
      260,  243,  255,  251,  254,  323,  256,  258,    0,  255,
      256,  258,    0,  257,  256,  253,  325,  255,  260,  254,

      261,  257,  259,  261,  254,  257,  260,  258,  260,    0,
      255,  259,    0,  323,  256,  258,  259,  255,  326,  258,
      261,  257,  259,  262,  325,  262,  260,  263,  261,  264,
      259,  261,  262,  266,  265,  258,  266,  263,  265,  259,
      262,    0,  264,    0,  259,  262,  326,  263,  261,  264,
      259,  262,  267,  262,    0,  263,  266,  264,  265,  267,
      262,  266,  265,  268,  266,  263,  265,    0,  262,  269,
      264,  268,  267,  262,  272,  263,  296,  264,  296,    0,
      267,  271,  268,  268,  266,  270,  265,  267,    0,  269,
      272,  268,  271,  270,  272,  274,  274,  269,    0,  268,

      267,  271,  272,  303,  296,  270,  296,  303,  273,  271,
      268,  268,  273,  270,  277,  273,  274,  269,  272,  278,
      271,  270,  272,  274,  274,  276,  275,  277,  273,  271,
      275,  303,  276,  270,  277,  303,  273,  279,  276,  278,
      273,  327,  277,  273,  274,  276,  275,  278,  328,  329,
      330,  331,  279,  276,  275,  277,  273,  279,  275,  280,
      276,  332,  277,  280,  333,  279,  276,  278,  334,  327,
      335,  307,  336,  276,  275,  307,  328,  329,  330,  331,
      279,  337,  338,  280,  339,  279,  340,  280,  342,  332,
      307,  280,  333,  343,  341,  345,  334,  346,  335,  307,

      336,  347,  348,  307,  341,  349,  350,  352,  353,  337,
      338,  280,  339,  354,  340,  355,  342,  357,  307,  358,
      359,  343,  341,  345,  360,  346,  361,  362,  363,  347,
      348,  364,  341,  349,  350,  352,  353,  365,  366,  367,
      368,  354,  369,  355,  370,  357,  371,  358,  359,  372,
      374,  375,  360,  376,  361,  362,  363,  377,  379,  364,
      380,  381,  382,  386,  384,  365,  366,  367,  368,  385,
      369,  385,  370,  384,  371,  387,  388,  372,  374,  375,
      389,  376,  390,  391,  392,  377,  379,  394,  380,  381,
      382,  386,  384,  395,  393,    0,  399,  385,  393,  385,

      400,  384,    0,  387,  388,  401,    0,  402,  389,  404,
      390,  391,  392,  511,  405,  394,  399,    0,  405,  406,
      400,  395,  393,  403,  399,  401,  393,  402,  400,  404,
      403,    0,    0,  401,  408,  402,  512,  404,  405,  406,
      407,  511,  405,  403,  399,  416,  405,  406,  400,  409,
      407,  403,  408,  401,  408,  402,  409,  404,  403,  410,
      407,  410,  408,  411,  512,  416,  405,  406,  407,  409,
      412,  403,  513,  416,    0,  418,  411,  409,  407,  413,
      408,  410,  408,  411,  409,    0,  412,  410,  407,  410,
      412,  411,  414,  416,  413,  418,  414,  409,  412,  413,

      513,  415,  417,  418,  411,  419,  417,  413,    0,  410,
        0,  411,  419,  420,  412,  415,  414,  420,  412,    0,
      414,  415,  413,  418,  414,  419,  417,  413,  421,  415,
      417,  423,  421,  419,  417,  424,  422,  420,  422,  425,
      419,  420,  425,  415,  414,  420,    0,  421,  514,  415,
      424,  423,  421,  419,  417,  424,  421,  426,  422,  423,
      421,  427,  425,  424,  422,  420,  422,  425,  426,  429,
      425,  428,  430,  429,  432,  421,  514,  426,  424,  423,
      421,  427,  431,  424,  431,  426,  422,    0,  432,  427,
      425,  428,  430,  429,  432,  434,  426,  429,    0,  428,

      430,  429,  432,    0,  431,  426,  433,  436,  434,  427,
      431,  435,  431,  433,  437,  434,  432,  438,  437,  428,
      430,  429,  432,  434,  515,  435,  433,  436,  516,    0,
      518,  435,  431,  520,  433,  436,  434,  438,  437,  435,
      439,  433,  437,  434,  440,  438,  437,  441,  439,    0,
      441,  440,  515,  435,  433,  436,  516,  442,  518,  435,
      439,  520,  521,    0,  440,  438,  437,  446,  439,  522,
      441,  443,  440,  442,  443,  441,  439,  442,  441,  440,
      444,    0,  446,  445,  444,  442,  445,  446,  439,  447,
      521,  443,  440,  448,    0,  446,    0,  522,  441,  443,

      444,  442,  443,  445,  447,  442,  448,  452,  444,  447,
      446,  445,  444,  448,  445,  446,  449,  447,  450,  443,
      451,  448,  453,  454,  450,  523,  449,  452,  444,  455,
      451,  445,  447,    0,  448,  452,  449,  447,  450,  455,
      451,  448,  453,  454,  449,  456,  450,  524,  451,  455,
      453,  454,  450,  523,  449,  452,  458,  455,  451,  459,
      457,  456,  460,    0,  449,  456,  450,  455,  451,  457,
      453,  454,  525,  456,  459,  524,  458,  455,  527,  459,
      457,  461,  460,    0,  458,  461,    0,  459,  457,  456,
      460,  462,  462,  456,  463,    0,  468,  457,  463,    0,

      525,  461,  459,  464,  458,  464,  527,  459,  457,  461,
      460,  468,  462,  461,  465,  466,  468,  466,  463,  462,
      462,  467,  463,  464,  468,    0,  463,  470,  528,  461,
      529,  464,  469,  464,  465,  466,  465,  467,    0,  468,
      462,  467,  465,  466,  468,  466,  463,  470,  469,  467,
      471,  464,  469,  472,  473,  470,  528,  471,  529,  474,
      469,    0,  465,  466,  475,  467,  472,  476,  473,  467,
      471,  476,    0,  472,  473,  470,  469,  477,  471,  474,
      469,  472,  473,    0,  475,  471,  477,  474,  480,  478,
      480,  476,  475,  482,  472,  476,  473,  477,  471,  476,

      478,  472,  473,  479,    0,  477,  530,  474,  482,  478,
      480,  479,  475,  482,  477,  484,  480,  478,  480,  476,
      481,  482,  485,  479,  481,  477,  483,  486,  478,  483,
        0,  479,  485,  487,  530,  484,  482,  478,  480,  479,
        0,  482,  485,  484,  481,    0,  483,  486,  481,  488,
      485,  479,  481,  487,  483,  486,  489,  483,  490,  491,
      485,  487,  492,  484,    0,  496,  491,  488,  494,  488,
      485,  489,  481,  490,  483,  486,  489,  488,  490,  491,
      493,  487,  492,  494,  489,  496,  490,  491,  494,  495,
      492,  493,  497,  496,  491,  488,  494,  488,  495,  489,

      493,  490,    0,    0,  489,  498,  490,  491,  493,  495,
      492,  494,  497,  496,  498,  531,  494,  495,    0,  493,
      497,  500,    0,  501,  499,  498,  495,  501,  493,  533,
      502,  500,  534,  498,  499,    0,  499,  495,  535,  502,
      497,  500,  498,  531,  499,  503,  504,  501,  504,  500,
      502,  501,  499,  498,    0,  501,  538,  533,  502,  500,
      534,  503,  499,  505,  499,  503,  535,  502,  504,  500,
      506,    0,  499,  503,  504,  501,  504,  508,  502,  507,
      508,  505,  509,  505,  538,  506,  539,  540,  507,  503,
      506,  505,  507,  503,  541,  509,  504,  508,  506,  507,

      542,  543,  509,  544,  546,  508,  549,  507,  508,  505,
      509,  505,  550,  506,  539,  540,  507,  552,  506,  555,
      507,  557,  541,  509,  558,  508,  559,  507,  542,  543,
      509,  544,  546,  560,  549,  561,  562,  563,  565,  569,
      550,  571,  573,  574,  576,  552,  577,  555,  563,  557,
      575,  575,  558,  579,  559,  580,  581,  582,  583,  585,
      586,  560,  587,  561,  562,  563,  565,  569,  588,  571,
      573,  574,  576,  589,  577,  590,  563,  591,  575,  575,
      592,  579,  593,  580,  581,  582,  583,  585,  586,  595,
      587,  596,  597,  598,  601,  603,  588,  604,  605,  606,

      607,  589,  608,  590,  609,  591,  610,  612,  592,  614,
      593,  617,    0,  619,    0,    0,  618,  595,  620,  596,
      597,  598,  601,  603,  617,  604,  605,  606,  607,  618,
      608,  617,  609,  619,  610,  612,  618,  614,  620,  617,
      621,  619,  622,  623,  618,  624,  620,  625,    0,  624,
      626,    0,  617,  621,  626,    0,  725,  618,    0,  617,
      621,  619,  622,  623,  618,  632,  620,  625,  621,  624,
      622,  623,  627,  624,  626,  625,  628,  624,  626,  629,
      627,  621,  626,  631,  725,  632,  631,    0,  621,  628,
      622,  623,  627,  632,  629,  625,  628,  624,  630,  629,

      627,    0,  626,  633,  628,  634,  631,  629,  627,  635,
      633,  631,  630,  632,  631,  636,  638,  628,  630,  727,
      627,  634,  629,  633,  628,  634,  630,  629,  637,  635,
      636,  633,  637,  634,  631,  636,  638,  635,  633,  639,
      630,  639,    0,  636,  638,  642,  630,  727,  641,  634,
      640,  633,  637,  634,  640,  641,  637,  635,  636,  643,
      637,  639,    0,  636,  638,  642,  644,  639,  641,  639,
      640,    0,  728,  642,    0,  646,  641,  644,  640,  643,
      637,  645,  640,  641,  647,    0,  644,  643,  650,  639,
      651,  646,  645,  642,  644,  646,  641,  653,  640,  647,

      728,  645,  648,  646,  647,  644,  648,  643,  650,  645,
      651,  649,  647,  652,  644,  649,  650,  653,  651,  646,
      645,  729,  654,  646,  730,  653,  648,  647,  652,  645,
      648,  657,  647,  652,  648,  649,  650,  656,  651,  649,
      655,  652,  654,  649,  655,  653,  658,  659,  656,  729,
      654,  657,  730,  660,  648,  658,  652,  656,  662,  657,
      664,  652,  670,  649,  655,  656,  658,  659,  655,  659,
      654,  663,  655,  660,  658,  659,  656,  661,  662,  657,
      664,  660,  670,  658,  663,  656,  662,  661,  664,  665,
      670,  663,  655,  731,  658,  659,    0,  661,  667,  663,

      668,  660,  665,  666,  672,  661,  662,  732,  664,  665,
      670,  667,  663,  668,  669,  661,  669,  665,  667,  663,
      668,  731,  666,  666,  672,  661,  667,  669,  668,  671,
      665,  666,  672,  673,  669,  732,  671,  665,  674,  667,
      733,  668,  669,  676,  669,  675,  667,  677,  668,  671,
      666,  666,  672,  673,  677,  669,  678,  671,  674,  679,
      675,  673,  669,  676,  671,  675,  674,  677,  733,  680,
      679,  676,    0,  675,  684,  677,  678,  671,    0,  679,
      735,  673,  677,  736,  678,  681,  674,  679,  675,  680,
      685,  676,  685,  675,  684,  677,  683,  680,  679,  681,

      681,  686,  684,  682,  678,  681,  682,  679,  735,  683,
        0,  736,  685,  681,  737,    0,  683,  680,  685,  687,
      685,  686,  684,  682,  683,  688,  690,  681,  681,  686,
      693,  682,  687,  681,  682,  689,  693,  683,  688,  687,
      685,  738,  737,  689,  683,  688,  690,  687,  691,  686,
      693,  682,  691,  688,  690,  689,    0,  692,  693,    0,
      687,  692,  694,  689,  693,    0,  688,  687,  739,  738,
      694,  689,  691,  688,  690,  695,  691,  696,  693,  697,
      691,  692,  694,  689,  698,  692,    0,  697,  695,  692,
      694,  700,  696,  698,  701,  695,  739,  696,  694,  697,

      691,    0,    0,  695,  698,  696,  699,  697,  699,  692,
      694,  700,  698,  702,  701,  697,  695,  702,  703,  700,
      696,  698,  701,  695,  705,  696,  741,  697,  699,  706,
      704,  742,  698,  702,  699,  708,  699,    0,  703,  700,
      704,  702,  701,    0,  705,  702,  703,  715,    0,  706,
      704,  707,  705,  743,  741,  708,  699,  706,  704,  742,
      709,  702,  709,  708,  710,  707,  703,  715,  704,  711,
      712,  707,  705,  710,  712,  715,  713,  706,  704,  707,
      717,  743,  709,  708,  710,  711,  744,  719,  709,  711,
      709,  713,  710,  707,  712,  715,  713,  711,  712,  707,

      717,  710,  712,  714,  713,  714,  716,  719,  717,  716,
      709,  745,  710,  711,  744,  719,  718,  711,  720,  713,
      721,  722,  712,  714,  713,  746,  716,  747,  717,  748,
      749,  714,  718,  714,  716,  719,  718,  716,  720,  745,
      721,  722,  752,  754,  718,  755,  720,  756,  721,  722,
      757,  714,  759,  746,  716,  747,  762,  748,  749,  763,
      718,  764,  765,  768,  718,  771,  720,  773,  721,  722,
      752,  754,  774,  755,  775,  756,  778,  779,  757,  780,
      759,  782,  783,  785,  762,  786,  787,  763,  788,  764,
      765,  768,  789,  771,  790,  773,  791,  792,  793,  795,

      774,  796,  775,  797,  778,  779,  799,  780,  800,  782,
      783,  785,  801,  786,  787,  803,  788,  804,  805,  883,
      789,  806,  790,  885,  791,  792,  793,  795,  807,  796,
      808,  797,  809,  809,  799,  803,  800,  804,  805,  805,
      801,  806,  810,  803,  810,  804,  805,  883,  807,  806,
      808,  885,    0,  809,  813,    0,  807,  814,  808,  811,
      809,  809,    0,  803,  810,  804,  805,  805,  811,  806,
      810,  815,  810,  812,  813,  815,  807,  814,  808,  811,
      816,  809,  813,  812,  817,  814,  818,  811,    0,  819,
      816,  817,  810,  812,    0,  815,  811,  886,  887,  815,

      816,  812,  813,  815,  817,  814,  818,  811,  816,  819,
      820,  812,  817,  822,  818,  823,  821,  819,  816,  817,
      824,  812,  822,  815,    0,  886,  887,  825,  816,  888,
      820,  821,  817,  822,  818,  823,  821,  819,  820,    0,
      824,  822,  825,  823,  821,  826,  889,  825,  824,  828,
      822,  830,  827,  828,  829,  825,  829,  888,  820,  821,
      826,  822,    0,  823,  821,  826,  827,  831,  824,  828,
      825,  830,  827,  826,  889,  825,  829,  828,  832,  830,
      827,  828,  829,  833,  829,  832,    0,  831,  826,  834,
      835,  834,  836,  826,  827,  831,  837,  828,  832,  830,

      827,  835,  838,  833,  829,  836,  832,  840,  839,  834,
      835,  833,  836,  832,  841,  831,  837,  834,  835,  834,
      836,  843,  838,  839,  837,  844,  832,  840,  839,  835,
      838,  833,  842,  836,  841,  840,  839,  834,  835,  844,
      836,  843,  841,  846,  837,  844,    0,  842,  847,  843,
      838,  839,  842,  844,  845,  840,  839,  848,  849,  850,
      842,  845,  841,  846,  851,    0,    0,  844,  847,  843,
      848,  846,    0,  844,  845,  842,  847,  848,  849,  850,
      842,  852,  845,  891,  851,  848,  849,  850,  855,  845,
      853,  846,  851,  856,  853,  857,  847,  854,  848,  858,

      854,  852,  845,  855,  892,  848,  849,  850,  855,  852,
      861,  891,  851,  856,  853,  857,  855,  854,  853,  858,
      859,  856,  853,  857,  860,  854,  862,  858,  854,  852,
      861,  855,  892,  859,  893,  863,  855,  860,  861,  863,
      859,  856,  853,  857,  860,  854,  862,  858,  859,  864,
      866,  866,  860,    0,  862,  863,  865,    0,  861,    0,
      865,  859,  893,  863,    0,  860,  867,  863,  859,  864,
      872,  866,  860,    0,  862,  868,  868,  864,  866,  866,
      865,  867,  871,  863,  865,  872,  867,  869,  865,    0,
      872,  869,  870,    0,  867,  871,  868,  864,  872,  866,

        0,  873,  871,  868,  868,  873,  870,  874,  865,  867,
      871,  869,  870,  872,  867,  869,  875,  877,  872,  869,
      870,  876,  876,  871,  868,  873,  878,  874,  882,  873,
      871,  894,  897,  873,  870,  874,  875,  877,  879,  869,
      870,  901,  876,  880,  875,  877,  878,  880,  882,  876,
      876,  903,  879,  873,  878,  874,  882,  881,  879,  894,
      897,  881,  904,  907,  875,  877,  879,  880,  908,  901,
      876,  880,  912,  913,  878,  880,  882,  915,  917,  903,
      879,  881,  918,  920,  921,  881,  879,  922,  924,  881,
      904,  907,  925,  929,  931,  880,  908,  932,  933,  938,

      912,  913,  939,  940,  941,  915,  917,    0,  942,  881,
      918,  920,  921,  943,  944,  922,  924,  942,    0, 1000,
      925,  929,  931,  940,  941,  932,  933,  938,  942,  944,
      939,  940,  941,  943,  944,  945,  942, 1003,  947,  946,
      948,  943,  944,    0,    0,  942,  946, 1000,  949,  945,
      949,  940,  941, 1004,  948,  945,  942,  944,  947,  946,
      948,  943,  944,  945,  950, 1003,  947,  946,  948,  952,
      949,  953,  951,  951,  946,  955,  949,  945,  949,  950,
        0, 1004,  948,  945,  950,  956,  947,  946,  948,  952,
      957,  953,  950,  951,  954,  955,  954,  952,  949,  953,

      951,  951,    0,  955,    0,  956,  958,  950,  959,  962,
      957,  960,  950,  956,    0,  961,  954,  952,  957,  953,
      960,  951,  954,  955,  954,  963,  958,  964,  959,  962,
      961,  960,  965,  956,  958,  961,  959,  962,  957,  960,
      964,  966,  967,  961,  954,  963,  968,  964,  960,    0,
        0,  969,  965,  963,  958,  964,  959,  962,  961,  960,
      965,  966,  967,  961,  969,  970,  968,  971,  964,  966,
      967,  969,    0,  963,  968,  964,  973,  972,  975,  969,
      965,  972,  975,    0,    0,  970,    0,  971,  976,  966,
      967,  974,  969,  970,  968,  971,  973,  972,  974,  969,

      978,  979,  975,  977,  973,  972,  975,  980,  976,  972,
      975,  974,  981,  970,  981,  971,  976,  983,  977,  974,
      978,  979,    0,  977,  973,  972,  974,  980,  978,  979,
      975,  977,  984,  982,  981,  980,  976,  983,  985,  974,
      981,    0,  981,  986,  987,  983,  977,  982,  978,  979,
      986,  977,  984,  982,    0,  980,  991,  992,  985,    0,
      984,  982,  981,  986,  987,  983,  985,  990,  993,  988,
      989,  986,  987,  988,  989,  982,  991,  992,  986,  994,
      984,  982,  990,  996,  991,  992,  985,  990,  993, 1007,
      996,  986,  987,  988,  989,  990,  993,  988,  989,  994,

      995,  988,  989,  996,  991,  992, 1011,  994, 1014, 1015,
      990,  996, 1017,  995, 1018,  990,  993, 1007,  996, 1021,
      995,  988,  989, 1024, 1025, 1026, 1029,  994,  995, 1030,
     1031,  996,    0,    0, 1011, 1032, 1014, 1015, 1061, 1033,
     1017,  995, 1018,    0, 1034, 1035, 1029, 1021,  995, 1030,
     1031, 1024, 1025, 1026, 1029, 1032, 1036, 1030, 1031, 1033,
     1036, 1037, 1038, 1032, 1034, 1035, 1061, 1033,    0,    0,
        0, 1039, 1034, 1035, 1029, 1040, 1041, 1030, 1031,    0,
     1036, 1037, 1038, 1032, 1036, 1042, 1039, 1033, 1036, 1037,
     1038, 1039, 1034, 1035,    0, 1040, 1041, 1043, 1044, 1039,

     1045, 1043,    0, 1040, 1041, 1042,    0, 1048, 1036, 1037,
     1038, 1047, 1062, 1042, 1039,    0, 1050, 1043, 1044, 1039,
     1045, 1047, 1051, 1040, 1041, 1043, 1044, 1048, 1045, 1043,
     1046, 1047, 1046, 1042, 1049, 1048, 1050, 1052,    0, 1047,
     1062, 1053, 1051, 1054, 1050, 1043, 1044, 1049, 1045, 1047,
     1051,    0, 1046, 1055, 1049, 1048, 1053, 1052, 1046, 1047,
     1046, 1053, 1049, 1054, 1050, 1052, 1056, 1058, 1057, 1053,
     1051, 1054, 1059, 1055, 1063, 1049, 1057, 1060, 1065, 1056,
     1046, 1055, 1049, 1066, 1053, 1052, 1056, 1058, 1057, 1053,
     1067, 1054, 1059, 1069, 1056, 1058, 1057, 1060, 1071, 1072,

     1059, 1055, 1063, 1075, 1057, 1060, 1065, 1056, 1089, 1074,
     1077, 1066, 1081, 1076, 1056, 1058, 1057, 1075, 1067, 1090,
     1059, 1069, 1074, 1075, 1078, 1060, 1071, 1072, 1076, 1074,
     1077, 1075, 1081, 1076, 1078, 1080, 1089, 1074, 1077, 1079,
     1081, 1076, 1092, 1093, 1078, 1075, 1106, 1090, 1080, 1083,
     1074, 1075, 1078, 1082, 1079, 1080, 1076, 1074, 1077, 1079,
     1081, 1076, 1078, 1080, 1084, 1086, 1082, 1079, 1085, 1083,
     1092, 1093, 1078, 1082, 1106, 1096, 1080, 1083, 1097, 1085,
     1098, 1082, 1079, 1080, 1084, 1086,    0, 1079, 1085, 1099,
     1100,    0, 1084, 1086, 1082, 1096, 1085, 1083, 1097, 1107,

     1098, 1082, 1099, 1096, 1103, 1102, 1097, 1085, 1098, 1099,
     1100, 1101, 1084, 1086, 1104, 1101, 1085, 1099, 1100, 1102,
     1109,    0, 1113, 1096, 1103, 1102, 1097, 1107, 1098, 1111,
     1099, 1101, 1103, 1102, 1104, 1112, 1114, 1099, 1100, 1101,
     1109, 1110, 1104, 1101, 1111, 1110,    0, 1102, 1109, 1111,
     1113, 1115, 1103, 1102, 1116, 1112, 1117, 1111, 1119, 1101,
     1120, 1110, 1104, 1112, 1114, 1122, 1115,    0, 1109, 1110,
        0, 1115, 1111, 1110, 1116,    0,    0, 1111, 1119, 1115,
     1120,    0, 1116, 1112, 1117, 1122, 1119,    0, 1120, 1110,
        0,    0,    0, 1122, 1115,    0,    0,    0,    0, 1115,

        0,    0, 1116,    0,    0,    0, 1119,    0, 1120,    0,
        0,    0,    0, 1122, 1124, 1124, 1124, 1124, 1124, 1124,
     1125,    0,    0, 1125, 1125, 1125, 1127,    0, 1127, 1127,
     1127, 1128, 1128, 1128,    0, 1128, 1128, 1129,    0, 1129,
     1129, 1129, 1129, 1130,    0, 1130, 1130, 1130, 1130, 1131,
        0, 1131, 1131, 1131, 1131, 1132,    0, 1132, 1132, 1132,
     1132, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,

     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
     1123
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../../include/sqlparser/Expr.h"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static std::stringstream strbuf;


/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweaks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 1850 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int hsql_lex_init (yyscan_t* scanner);

int hsql_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int hsql_lex_destroy (yyscan_t yyscanner );

int hsql_get_debug (yyscan_t yyscanner );

void hsql_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE hsql_get_extra (yyscan_t yyscanner );

void hsql_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *hsql_get_in (yyscan_t yyscanner );

void hsql_set_in  (FILE * _in_str ,yyscan_t yyscanner );

FILE *hsql_get_out (yyscan_t yyscanner );

void hsql_set_out  (FILE * _out_str ,yyscan_t yyscanner );

yy_size_t hsql_get_leng (yyscan_t yyscanner );

char *hsql_get_text (yyscan_t yyscanner );

int hsql_get_lineno (yyscan_t yyscanner );

void hsql_set_lineno (int _line_number ,yyscan_t yyscanner );

int hsql_get_column  (yyscan_t yyscanner );

void hsql_set_column (int _column_no ,yyscan_t yyscanner );

YYSTYPE * hsql_get_lval (yyscan_t yyscanner );

void hsql_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *hsql_get_lloc (yyscan_t yyscanner );
    
        void hsql_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int hsql_wrap (yyscan_t yyscanner );
#else
extern int hsql_wrap (yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int hsql_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int hsql_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			hsql_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		hsql__load_buffer_state(yyscanner );
		}

	{
#line 56 "flex_lexer.l"


#line 2138 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1124 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1123 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 58 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 60 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 62 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 64 "flex_lexer.l"
TOKEN(HIGH_PRIORITY)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(LOW_PRIORITY)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(CHARACTER)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(DATABASES)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(DATABASE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(DELAYED)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(HISTORY)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(IGNORE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(QUICK)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(CSV)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(TBL)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 143:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(EQUALS)             
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 150:
#line 214 "flex_lexer.l"
case 151:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATVAL;
}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTVAL;
}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 224 "flex_lexer.l"
{
	// Crop the leading and trailing quote char
	yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
{
        // Crop the leading and trailing backtick char
        yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
        return SQL_IDENTIFIER;
}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 236 "flex_lexer.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 241 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf = std::stringstream{}; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 242 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 243 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 244 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 245 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 247 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 3018 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * hsql_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( hsql_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of hsql_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	yy_size_t number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					hsql_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			hsql_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) hsql_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1124 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1124 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1123);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					hsql_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( hsql_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void hsql_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        hsql_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            hsql__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	hsql__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	hsql__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void hsql__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		hsql_pop_buffer_state();
	 *		hsql_push_buffer_state(new_buffer);
     */
	hsql_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	hsql__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (hsql_wrap()) processing, but the only time this flag
	 * is looked at is after hsql_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void hsql__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE hsql__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) hsql_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__create_buffer()" );

	b->yy_is_our_buffer = 1;

	hsql__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with hsql__create_buffer()
 * @param yyscanner The scanner object.
 */
    void hsql__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		hsql_free((void *) b->yy_ch_buf ,yyscanner );

	hsql_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a hsql_restart() or at EOF.
 */
    static void hsql__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	hsql__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then hsql__init_buffer was _probably_
     * called from hsql_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void hsql__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		hsql__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void hsql_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	hsql_ensure_buffer_stack(yyscanner);

	/* This block is copied from hsql__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from hsql__switch_to_buffer. */
	hsql__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void hsql_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		hsql__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void hsql_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)hsql_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in hsql_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE hsql__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) hsql_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	hsql__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to hsql_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       hsql__scan_bytes() instead.
 */
YY_BUFFER_STATE hsql__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return hsql__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to hsql_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE hsql__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) hsql_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in hsql__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = hsql__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in hsql__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE hsql_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int hsql_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int hsql_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *hsql_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t hsql_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *hsql_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void hsql_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void hsql_set_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void hsql_set_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "hsql_set_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see hsql__switch_to_buffer
 */
void hsql_set_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void hsql_set_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int hsql_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void hsql_set_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * hsql_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void hsql_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *hsql_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void hsql_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* hsql_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int hsql_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* hsql_lex_init_extra has the same functionality as hsql_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to hsql_alloc in
 * the yyextra field.
 */

int hsql_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    hsql_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) hsql_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    hsql_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from hsql_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * hsql_lex_init()
     */
    return 0;
}

/* hsql_lex_destroy is for both reentrant and non-reentrant scanners. */
int hsql_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		hsql__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		hsql_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	hsql_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        hsql_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * hsql_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    hsql_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *hsql_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return (void *) malloc( size );
}

void *hsql_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void hsql_free (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see hsql_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 250 "flex_lexer.l"


/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

